{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Copy of Copy of [Practice Notebook] AfterWork Data Science: Text Classification with Python","provenance":[{"file_id":"1VBFBg85JCD25v1xieXzrJB-HV7gdyYvm","timestamp":1626395100995},{"file_id":"1TFnjyibH1cBDLJrMqiwPWvy07n81mprZ","timestamp":1626393702731}],"collapsed_sections":["enxDwtXPZTpT","CYCruSReNHt6","85tygFqJZ0Xw","96Uz3PxJZ6E7","rvsnLPXTZ8P0","YlHYpKxfHRJ4","2BdB9m4_yK-1","Ve5fMuCicKkt","O_iOhAPnaERN","keZ-ozcdb4ED","tsBNmFdCNNb6","q17iZTtfH79K","xUaJ6znlIAwD","AMnB0e4YIErV","Btpd2TLcTSKQ"]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"EAqtdk93KQpq"},"source":["<font color=\"#4b76b7\">To start practicing, you will need to make a copy of it. Go to File > Save a Copy in Drive. You can then use the new copy that will appear in the new tab.</font>\n"]},{"cell_type":"markdown","metadata":{"id":"dC3nTnLyZNnv"},"source":["# AfterWork Data Science: Text Classification with Python"]},{"cell_type":"markdown","metadata":{"id":"enxDwtXPZTpT"},"source":["## Prerequisites"]},{"cell_type":"code","metadata":{"id":"dz7plWFhaQ9R","executionInfo":{"status":"ok","timestamp":1630166447379,"user_tz":-180,"elapsed":2544,"user":{"displayName":"Kuria K. Ken","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhnEdqxk2Mp_jIE4QawUovTRuGsreOMU5LcwWtLIw=s64","userId":"18249265223060828810"}}},"source":["# Importing the required libraries\n","# ---\n","# \n","import pandas as pd # library for data manipulation\n","import numpy as np  # librariy for scientific compuations\n","import re           # regex library to perform text preprocessing\n","import string       # library to work with strings\n","import nltk         # library for natural language processing\n","import scipy        # library for scientific computing "],"execution_count":1,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"CYCruSReNHt6"},"source":["## Example"]},{"cell_type":"markdown","metadata":{"id":"85tygFqJZ0Xw"},"source":["### Importing Data"]},{"cell_type":"code","metadata":{"id":"r_d2EpfjafP3","colab":{"base_uri":"https://localhost:8080/","height":204},"executionInfo":{"status":"ok","timestamp":1626393993812,"user_tz":-180,"elapsed":2195,"user":{"displayName":"Kuria K. Ken","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhnEdqxk2Mp_jIE4QawUovTRuGsreOMU5LcwWtLIw=s64","userId":"18249265223060828810"}},"outputId":"72169953-0aef-41d8-a3db-44e00ab1f05e"},"source":["# Question: Create a classification model to classify new tweets \n","# with different sentiments given the following dataset.\n","# ---\n","# Dataset URL = http://bit.ly/VaccinationsDS\n","# ---\n","#\n","df = pd.read_csv('http://bit.ly/VaccinationsDS')\n","df.head()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>tweet</th>\n","      <th>retweets</th>\n","      <th>likes</th>\n","      <th>sentiment</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Mother coming from #RoutineImmunization sessio...</td>\n","      <td>9.0</td>\n","      <td>11.0</td>\n","      <td>neutral</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Odisha vaccinates over 1 crore children in 19 ...</td>\n","      <td>14.0</td>\n","      <td>53.0</td>\n","      <td>neutral</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>India is at the forefront of vaccine developme...</td>\n","      <td>16.0</td>\n","      <td>15.0</td>\n","      <td>neutral</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>India is at the forefront of vaccine developme...</td>\n","      <td>16.0</td>\n","      <td>15.0</td>\n","      <td>neutral</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>The mobile-based application “Kilkari” aims to...</td>\n","      <td>37.0</td>\n","      <td>80.0</td>\n","      <td>neutral</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                                               tweet  retweets  likes sentiment\n","0  Mother coming from #RoutineImmunization sessio...       9.0   11.0   neutral\n","1  Odisha vaccinates over 1 crore children in 19 ...      14.0   53.0   neutral\n","2  India is at the forefront of vaccine developme...      16.0   15.0   neutral\n","3  India is at the forefront of vaccine developme...      16.0   15.0   neutral\n","4  The mobile-based application “Kilkari” aims to...      37.0   80.0   neutral"]},"metadata":{"tags":[]},"execution_count":2}]},{"cell_type":"markdown","metadata":{"id":"96Uz3PxJZ6E7"},"source":["### Data Exploration"]},{"cell_type":"code","metadata":{"id":"Tv_yGMvFbZtL","colab":{"base_uri":"https://localhost:8080/","height":34},"executionInfo":{"status":"ok","timestamp":1599515616198,"user_tz":-180,"elapsed":1585,"user":{"displayName":"Valentine Mwangi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgxlHLHVxIvBcRWF_w0UHnJeDAm5HF8Pv_ekfIQejpiEN_BNKLDQtkww25PSbq7hhs8KIiiGHWhU1ngsVQysnGXFz-tz3PRtvGxpIcY20-JUiYe7DaqXiwROrE-jomhCEphqcQmta1BM-qMJiAp7U8oDZRE16rHtMMiloux_iF90Zq0U0PrlY23Jno0hzI1ZMqYP7aPCklRKuYXLZK720s7pkPR1Nexs8gfxKZ8FJsN4x05TGAyPc4VcpmiNGTs8kQSn9HIQYXyR_LyFfpluQR3Mbkh1RWUyE-c45oJLOl0YdKZ_mNiZQCNER8W8jdQYQssZ_JZc-cMCR9ZLR_fhvCC75h4g8fxGc7aNofeuDAlmdzlf2zMTTiST09FQdOwX3Iw6Y-xnRJzP84gqIhPMXjLukS7OnkUmxsRcOPcs-FmxyONrTI0o7ITfuCqAnqHPyWy2-YTRxzjbOYW4gXMlCrLuS-75r_1llBDsE0FQHfQiobcZGHrb-gZwUSX9e4M4TXBKLi2mo5gzC8DV28nBPpGIbN1Nd02xX-9GDXpFFObik_uh-Ext0kqOvOXWl88ffwUf8iu9n7rebAf7zA7_NP8jFto6mV5xOUKIrqmULJj-pp3R7NFRnq99Ja8L5v3MwCtqtTla4cORPEoeO7WQZiostul11t7HVszk6QU5Hz4KrR9Xq-6JixUrysImIfXOLj7X4NG-N6db_M03SjXrwYNHzBcMAvnc4UutYNaeVdukCMAvpILW3wRV7ED_e2UkMPOmA=s64","userId":"06508552341818475520"}},"outputId":"df7310e5-0279-4afb-ecc4-c68d314ab646"},"source":["# We can determine the size of our dataset\n","# ---\n","#\n","df.shape"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(1801, 4)"]},"metadata":{"tags":[]},"execution_count":132}]},{"cell_type":"code","metadata":{"id":"tcizBnuNbVDl","colab":{"base_uri":"https://localhost:8080/","height":204},"executionInfo":{"status":"ok","timestamp":1599515616200,"user_tz":-180,"elapsed":896,"user":{"displayName":"Valentine Mwangi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgxlHLHVxIvBcRWF_w0UHnJeDAm5HF8Pv_ekfIQejpiEN_BNKLDQtkww25PSbq7hhs8KIiiGHWhU1ngsVQysnGXFz-tz3PRtvGxpIcY20-JUiYe7DaqXiwROrE-jomhCEphqcQmta1BM-qMJiAp7U8oDZRE16rHtMMiloux_iF90Zq0U0PrlY23Jno0hzI1ZMqYP7aPCklRKuYXLZK720s7pkPR1Nexs8gfxKZ8FJsN4x05TGAyPc4VcpmiNGTs8kQSn9HIQYXyR_LyFfpluQR3Mbkh1RWUyE-c45oJLOl0YdKZ_mNiZQCNER8W8jdQYQssZ_JZc-cMCR9ZLR_fhvCC75h4g8fxGc7aNofeuDAlmdzlf2zMTTiST09FQdOwX3Iw6Y-xnRJzP84gqIhPMXjLukS7OnkUmxsRcOPcs-FmxyONrTI0o7ITfuCqAnqHPyWy2-YTRxzjbOYW4gXMlCrLuS-75r_1llBDsE0FQHfQiobcZGHrb-gZwUSX9e4M4TXBKLi2mo5gzC8DV28nBPpGIbN1Nd02xX-9GDXpFFObik_uh-Ext0kqOvOXWl88ffwUf8iu9n7rebAf7zA7_NP8jFto6mV5xOUKIrqmULJj-pp3R7NFRnq99Ja8L5v3MwCtqtTla4cORPEoeO7WQZiostul11t7HVszk6QU5Hz4KrR9Xq-6JixUrysImIfXOLj7X4NG-N6db_M03SjXrwYNHzBcMAvnc4UutYNaeVdukCMAvpILW3wRV7ED_e2UkMPOmA=s64","userId":"06508552341818475520"}},"outputId":"e2e91dee-bc71-4f21-e44e-3a7363d6c477"},"source":["# To get an understanding of our dataset lets sample 10 records\n","# ---\n","#\n","df.sample(5)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>tweet</th>\n","      <th>retweets</th>\n","      <th>likes</th>\n","      <th>sentiment</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>822</th>\n","      <td>#MRVaccine will boost the immunity of children...</td>\n","      <td>72.0</td>\n","      <td>235.0</td>\n","      <td>neutral</td>\n","    </tr>\n","    <tr>\n","      <th>657</th>\n","      <td>Every child deserves a healthy life. Let’s ple...</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>positive</td>\n","    </tr>\n","    <tr>\n","      <th>1143</th>\n","      <td>#Immunization works by triggering the immune s...</td>\n","      <td>31.0</td>\n","      <td>42.0</td>\n","      <td>negative</td>\n","    </tr>\n","    <tr>\n","      <th>1528</th>\n","      <td>RT MoHFW_INDIA: Beating two diseases with one ...</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>neutral</td>\n","    </tr>\n","    <tr>\n","      <th>485</th>\n","      <td>An awareness rally for vaccination and Intensi...</td>\n","      <td>32.0</td>\n","      <td>72.0</td>\n","      <td>neutral</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                                                  tweet  ...  sentiment\n","822   #MRVaccine will boost the immunity of children...  ...    neutral\n","657   Every child deserves a healthy life. Let’s ple...  ...   positive\n","1143  #Immunization works by triggering the immune s...  ...   negative\n","1528  RT MoHFW_INDIA: Beating two diseases with one ...  ...    neutral\n","485   An awareness rally for vaccination and Intensi...  ...    neutral\n","\n","[5 rows x 4 columns]"]},"metadata":{"tags":[]},"execution_count":133}]},{"cell_type":"code","metadata":{"id":"d-Dhk5nBmR1B"},"source":["# Because this dataset is abit large, we will consider working with \n","# random sample of 200 records. This is for demo purposes because \n","# a large dataset would take a long time to perform some text\n","# processing techniques.\n","# ---\n","# \n","sample_df = df.sample(200)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"BDtEQCn6oAwJ"},"source":["This dataset will need some data cleaning i.e. removal of links, hashtags, etc."]},{"cell_type":"code","metadata":{"id":"HB8hRhj6N7Vl","colab":{"base_uri":"https://localhost:8080/","height":279},"executionInfo":{"status":"ok","timestamp":1599515628202,"user_tz":-180,"elapsed":1515,"user":{"displayName":"Valentine Mwangi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgxlHLHVxIvBcRWF_w0UHnJeDAm5HF8Pv_ekfIQejpiEN_BNKLDQtkww25PSbq7hhs8KIiiGHWhU1ngsVQysnGXFz-tz3PRtvGxpIcY20-JUiYe7DaqXiwROrE-jomhCEphqcQmta1BM-qMJiAp7U8oDZRE16rHtMMiloux_iF90Zq0U0PrlY23Jno0hzI1ZMqYP7aPCklRKuYXLZK720s7pkPR1Nexs8gfxKZ8FJsN4x05TGAyPc4VcpmiNGTs8kQSn9HIQYXyR_LyFfpluQR3Mbkh1RWUyE-c45oJLOl0YdKZ_mNiZQCNER8W8jdQYQssZ_JZc-cMCR9ZLR_fhvCC75h4g8fxGc7aNofeuDAlmdzlf2zMTTiST09FQdOwX3Iw6Y-xnRJzP84gqIhPMXjLukS7OnkUmxsRcOPcs-FmxyONrTI0o7ITfuCqAnqHPyWy2-YTRxzjbOYW4gXMlCrLuS-75r_1llBDsE0FQHfQiobcZGHrb-gZwUSX9e4M4TXBKLi2mo5gzC8DV28nBPpGIbN1Nd02xX-9GDXpFFObik_uh-Ext0kqOvOXWl88ffwUf8iu9n7rebAf7zA7_NP8jFto6mV5xOUKIrqmULJj-pp3R7NFRnq99Ja8L5v3MwCtqtTla4cORPEoeO7WQZiostul11t7HVszk6QU5Hz4KrR9Xq-6JixUrysImIfXOLj7X4NG-N6db_M03SjXrwYNHzBcMAvnc4UutYNaeVdukCMAvpILW3wRV7ED_e2UkMPOmA=s64","userId":"06508552341818475520"}},"outputId":"d7ffad28-4167-488e-b5a0-36811fe99968"},"source":["# Plotting the distribution of sentiments\n","# ---\n","#\n","sns.countplot(sample_df['sentiment']);"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"ZgbA6XPBOehq"},"source":["We have an unbalanced dataset. Let's create a balanced one."]},{"cell_type":"code","metadata":{"id":"3BvaKFiySJUI","colab":{"base_uri":"https://localhost:8080/","height":562},"executionInfo":{"status":"error","timestamp":1627050628774,"user_tz":-180,"elapsed":48,"user":{"displayName":"Kuria K. Ken","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhnEdqxk2Mp_jIE4QawUovTRuGsreOMU5LcwWtLIw=s64","userId":"18249265223060828810"}},"outputId":"77813fd0-d70a-480c-b45f-608719e3eb13"},"source":["# sampling tweets with neutral sentiments\n","df_neutral = df[df[\"sentiment\"] == 'neutral'] \n","df_neutral = df_neutral.sample(50)\n","\n","# sampling tweets with negative sentiments\n","df_negative = df[df[\"sentiment\"] == 'negative'] \n","df_negative = df_negative.sample(50)\n","\n","# sampling tweets positive\n","df_positive = df[df[\"sentiment\"] == 'positive'] \n","df_positive = df_positive.sample(50)\n","\n","# combining our dataframes\n","df = pd.concat([df_neutral, df_negative, df_positive])\n","df.head()"],"execution_count":null,"outputs":[{"output_type":"error","ename":"KeyError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36mget_loc\u001b[0;34m(self, key, method, tolerance)\u001b[0m\n\u001b[1;32m   2897\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2898\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcasted_key\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2899\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mKeyError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0merr\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32mpandas/_libs/index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n","\u001b[0;32mpandas/_libs/index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n","\u001b[0;32mpandas/_libs/hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n","\u001b[0;32mpandas/_libs/hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n","\u001b[0;31mKeyError\u001b[0m: 'sentiment'","\nThe above exception was the direct cause of the following exception:\n","\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)","\u001b[0;32m<ipython-input-22-fc3ecf982b0f>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# sampling tweets with neutral sentiments\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mdf_neutral\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mdf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"sentiment\"\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m'neutral'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0mdf_neutral\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdf_neutral\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msample\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m50\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;31m# sampling tweets with negative sentiments\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36m__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   2904\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnlevels\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2905\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_getitem_multilevel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2906\u001b[0;31m             \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2907\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mis_integer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2908\u001b[0m                 \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36mget_loc\u001b[0;34m(self, key, method, tolerance)\u001b[0m\n\u001b[1;32m   2898\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcasted_key\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2899\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mKeyError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0merr\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2900\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0merr\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2901\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2902\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mtolerance\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyError\u001b[0m: 'sentiment'"]}]},{"cell_type":"code","metadata":{"id":"0vRaDZ1pVg4u","colab":{"base_uri":"https://localhost:8080/","height":562},"executionInfo":{"status":"error","timestamp":1627050621332,"user_tz":-180,"elapsed":1049,"user":{"displayName":"Kuria K. Ken","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhnEdqxk2Mp_jIE4QawUovTRuGsreOMU5LcwWtLIw=s64","userId":"18249265223060828810"}},"outputId":"12527fc2-22ad-45df-b842-0cf124e1b070"},"source":["# Previewing the distribution of sentiment\n","# ---\n","#\n","import seaborn as sns\n","sns.countplot(df['sentiment']);"],"execution_count":null,"outputs":[{"output_type":"error","ename":"KeyError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36mget_loc\u001b[0;34m(self, key, method, tolerance)\u001b[0m\n\u001b[1;32m   2897\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2898\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcasted_key\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2899\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mKeyError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0merr\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32mpandas/_libs/index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n","\u001b[0;32mpandas/_libs/index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n","\u001b[0;32mpandas/_libs/hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n","\u001b[0;32mpandas/_libs/hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n","\u001b[0;31mKeyError\u001b[0m: 'sentiment'","\nThe above exception was the direct cause of the following exception:\n","\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)","\u001b[0;32m<ipython-input-21-bae97a17ac85>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;31m#\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mseaborn\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0msns\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m \u001b[0msns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcountplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'sentiment'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m;\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36m__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   2904\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnlevels\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2905\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_getitem_multilevel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2906\u001b[0;31m             \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2907\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mis_integer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2908\u001b[0m                 \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36mget_loc\u001b[0;34m(self, key, method, tolerance)\u001b[0m\n\u001b[1;32m   2898\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcasted_key\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2899\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mKeyError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0merr\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2900\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0merr\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2901\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2902\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mtolerance\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyError\u001b[0m: 'sentiment'"]}]},{"cell_type":"markdown","metadata":{"id":"l75XLrfJdh55"},"source":["We now have a balanced dataset."]},{"cell_type":"markdown","metadata":{"id":"rvsnLPXTZ8P0"},"source":["### Data Preparation"]},{"cell_type":"markdown","metadata":{"id":"YlHYpKxfHRJ4"},"source":["#### Basic Data Cleaning"]},{"cell_type":"code","metadata":{"id":"a8riNiGfupWL","colab":{"base_uri":"https://localhost:8080/","height":102},"executionInfo":{"status":"ok","timestamp":1599515677842,"user_tz":-180,"elapsed":1322,"user":{"displayName":"Valentine Mwangi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgxlHLHVxIvBcRWF_w0UHnJeDAm5HF8Pv_ekfIQejpiEN_BNKLDQtkww25PSbq7hhs8KIiiGHWhU1ngsVQysnGXFz-tz3PRtvGxpIcY20-JUiYe7DaqXiwROrE-jomhCEphqcQmta1BM-qMJiAp7U8oDZRE16rHtMMiloux_iF90Zq0U0PrlY23Jno0hzI1ZMqYP7aPCklRKuYXLZK720s7pkPR1Nexs8gfxKZ8FJsN4x05TGAyPc4VcpmiNGTs8kQSn9HIQYXyR_LyFfpluQR3Mbkh1RWUyE-c45oJLOl0YdKZ_mNiZQCNER8W8jdQYQssZ_JZc-cMCR9ZLR_fhvCC75h4g8fxGc7aNofeuDAlmdzlf2zMTTiST09FQdOwX3Iw6Y-xnRJzP84gqIhPMXjLukS7OnkUmxsRcOPcs-FmxyONrTI0o7ITfuCqAnqHPyWy2-YTRxzjbOYW4gXMlCrLuS-75r_1llBDsE0FQHfQiobcZGHrb-gZwUSX9e4M4TXBKLi2mo5gzC8DV28nBPpGIbN1Nd02xX-9GDXpFFObik_uh-Ext0kqOvOXWl88ffwUf8iu9n7rebAf7zA7_NP8jFto6mV5xOUKIrqmULJj-pp3R7NFRnq99Ja8L5v3MwCtqtTla4cORPEoeO7WQZiostul11t7HVszk6QU5Hz4KrR9Xq-6JixUrysImIfXOLj7X4NG-N6db_M03SjXrwYNHzBcMAvnc4UutYNaeVdukCMAvpILW3wRV7ED_e2UkMPOmA=s64","userId":"06508552341818475520"}},"outputId":"5db953fc-f57b-4981-e9f5-2b3b7ddfc206"},"source":["# Let's determine whether our columns have the right data types\n","# ---\n","#\n","df.dtypes"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["tweet         object\n","retweets     float64\n","likes        float64\n","sentiment     object\n","dtype: object"]},"metadata":{"tags":[]},"execution_count":138}]},{"cell_type":"code","metadata":{"id":"ns54XoFrVcLp","colab":{"base_uri":"https://localhost:8080/","height":34},"executionInfo":{"status":"ok","timestamp":1599515679166,"user_tz":-180,"elapsed":751,"user":{"displayName":"Valentine Mwangi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgxlHLHVxIvBcRWF_w0UHnJeDAm5HF8Pv_ekfIQejpiEN_BNKLDQtkww25PSbq7hhs8KIiiGHWhU1ngsVQysnGXFz-tz3PRtvGxpIcY20-JUiYe7DaqXiwROrE-jomhCEphqcQmta1BM-qMJiAp7U8oDZRE16rHtMMiloux_iF90Zq0U0PrlY23Jno0hzI1ZMqYP7aPCklRKuYXLZK720s7pkPR1Nexs8gfxKZ8FJsN4x05TGAyPc4VcpmiNGTs8kQSn9HIQYXyR_LyFfpluQR3Mbkh1RWUyE-c45oJLOl0YdKZ_mNiZQCNER8W8jdQYQssZ_JZc-cMCR9ZLR_fhvCC75h4g8fxGc7aNofeuDAlmdzlf2zMTTiST09FQdOwX3Iw6Y-xnRJzP84gqIhPMXjLukS7OnkUmxsRcOPcs-FmxyONrTI0o7ITfuCqAnqHPyWy2-YTRxzjbOYW4gXMlCrLuS-75r_1llBDsE0FQHfQiobcZGHrb-gZwUSX9e4M4TXBKLi2mo5gzC8DV28nBPpGIbN1Nd02xX-9GDXpFFObik_uh-Ext0kqOvOXWl88ffwUf8iu9n7rebAf7zA7_NP8jFto6mV5xOUKIrqmULJj-pp3R7NFRnq99Ja8L5v3MwCtqtTla4cORPEoeO7WQZiostul11t7HVszk6QU5Hz4KrR9Xq-6JixUrysImIfXOLj7X4NG-N6db_M03SjXrwYNHzBcMAvnc4UutYNaeVdukCMAvpILW3wRV7ED_e2UkMPOmA=s64","userId":"06508552341818475520"}},"outputId":"a50733f3-ad49-4a46-f6eb-4f8cafcd4c3e"},"source":["# What values are in our target variable?\n","# ---\n","#\n","df.sentiment.unique()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array(['neutral', 'negative', 'positive'], dtype=object)"]},"metadata":{"tags":[]},"execution_count":139}]},{"cell_type":"code","metadata":{"id":"-6JoJc4Nvz1S","colab":{"base_uri":"https://localhost:8080/","height":102},"executionInfo":{"status":"ok","timestamp":1599515683017,"user_tz":-180,"elapsed":1162,"user":{"displayName":"Valentine Mwangi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgxlHLHVxIvBcRWF_w0UHnJeDAm5HF8Pv_ekfIQejpiEN_BNKLDQtkww25PSbq7hhs8KIiiGHWhU1ngsVQysnGXFz-tz3PRtvGxpIcY20-JUiYe7DaqXiwROrE-jomhCEphqcQmta1BM-qMJiAp7U8oDZRE16rHtMMiloux_iF90Zq0U0PrlY23Jno0hzI1ZMqYP7aPCklRKuYXLZK720s7pkPR1Nexs8gfxKZ8FJsN4x05TGAyPc4VcpmiNGTs8kQSn9HIQYXyR_LyFfpluQR3Mbkh1RWUyE-c45oJLOl0YdKZ_mNiZQCNER8W8jdQYQssZ_JZc-cMCR9ZLR_fhvCC75h4g8fxGc7aNofeuDAlmdzlf2zMTTiST09FQdOwX3Iw6Y-xnRJzP84gqIhPMXjLukS7OnkUmxsRcOPcs-FmxyONrTI0o7ITfuCqAnqHPyWy2-YTRxzjbOYW4gXMlCrLuS-75r_1llBDsE0FQHfQiobcZGHrb-gZwUSX9e4M4TXBKLi2mo5gzC8DV28nBPpGIbN1Nd02xX-9GDXpFFObik_uh-Ext0kqOvOXWl88ffwUf8iu9n7rebAf7zA7_NP8jFto6mV5xOUKIrqmULJj-pp3R7NFRnq99Ja8L5v3MwCtqtTla4cORPEoeO7WQZiostul11t7HVszk6QU5Hz4KrR9Xq-6JixUrysImIfXOLj7X4NG-N6db_M03SjXrwYNHzBcMAvnc4UutYNaeVdukCMAvpILW3wRV7ED_e2UkMPOmA=s64","userId":"06508552341818475520"}},"outputId":"e6812623-7341-40eb-8f1d-ac391230df7f"},"source":["# Let's check for missing values \n","# ---\n","# \n","df.isnull().sum()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["tweet        0\n","retweets     0\n","likes        0\n","sentiment    0\n","dtype: int64"]},"metadata":{"tags":[]},"execution_count":140}]},{"cell_type":"markdown","metadata":{"id":"xxpcyoUfoy9s"},"source":["We don't have any missing values, so we are good to go."]},{"cell_type":"markdown","metadata":{"id":"2BdB9m4_yK-1"},"source":["#### Text Processing"]},{"cell_type":"code","metadata":{"id":"SPkK6Kj6YFjf"},"source":["# We will create a custom function that will contain all the text cleaning \n","# techniques. We will then reuse the same function for cleaning new data.\n","# ---\n","#\n","def text_cleaning(tweet):\n","  # Removing url/links\n","  df['tweet'] = df.tweet.apply(lambda x: re.sub(r'http\\S+|www\\S+|https\\S+','', str(x)))\n","\n","  # Removing @ and # characters and replacing them with space\n","  df['tweet'] = df.tweet.str.replace('#',' ')\n","  df['tweet'] = df.tweet.str.replace('@',' ') \n","\n","  # Conversion to lowercase \n","  df['tweet'] = df.tweet.apply(lambda x: \" \".join(x.lower() for x in x.split()))\n","\n","  # Removing punctuation characters\n","  df['tweet'] = df.tweet.str.replace('[^\\w\\s]','')\n","\n","  # Removing stop words\n","  df['tweet'] = df.tweet.apply(lambda x: \" \".join(x for x in x.split() if x not in stop))\n","\n","  # Lemmatization\n","  df['tweet'] = df.tweet.apply(lambda x: \" \".join([Word(word).lemmatize() for word in x.split()])) "],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"iQ6RfXmnZe7g","colab":{"base_uri":"https://localhost:8080/","height":204},"executionInfo":{"status":"ok","timestamp":1599515701517,"user_tz":-180,"elapsed":5516,"user":{"displayName":"Valentine Mwangi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgxlHLHVxIvBcRWF_w0UHnJeDAm5HF8Pv_ekfIQejpiEN_BNKLDQtkww25PSbq7hhs8KIiiGHWhU1ngsVQysnGXFz-tz3PRtvGxpIcY20-JUiYe7DaqXiwROrE-jomhCEphqcQmta1BM-qMJiAp7U8oDZRE16rHtMMiloux_iF90Zq0U0PrlY23Jno0hzI1ZMqYP7aPCklRKuYXLZK720s7pkPR1Nexs8gfxKZ8FJsN4x05TGAyPc4VcpmiNGTs8kQSn9HIQYXyR_LyFfpluQR3Mbkh1RWUyE-c45oJLOl0YdKZ_mNiZQCNER8W8jdQYQssZ_JZc-cMCR9ZLR_fhvCC75h4g8fxGc7aNofeuDAlmdzlf2zMTTiST09FQdOwX3Iw6Y-xnRJzP84gqIhPMXjLukS7OnkUmxsRcOPcs-FmxyONrTI0o7ITfuCqAnqHPyWy2-YTRxzjbOYW4gXMlCrLuS-75r_1llBDsE0FQHfQiobcZGHrb-gZwUSX9e4M4TXBKLi2mo5gzC8DV28nBPpGIbN1Nd02xX-9GDXpFFObik_uh-Ext0kqOvOXWl88ffwUf8iu9n7rebAf7zA7_NP8jFto6mV5xOUKIrqmULJj-pp3R7NFRnq99Ja8L5v3MwCtqtTla4cORPEoeO7WQZiostul11t7HVszk6QU5Hz4KrR9Xq-6JixUrysImIfXOLj7X4NG-N6db_M03SjXrwYNHzBcMAvnc4UutYNaeVdukCMAvpILW3wRV7ED_e2UkMPOmA=s64","userId":"06508552341818475520"}},"outputId":"0c7632c0-6517-4e93-d834-0a0787894273"},"source":["# Applying the text_cleaning function to our dataframe.\n","# ---\n","# NB: This process may take 2-5 min.\n","# ---\n","#\n","df['tweet'].apply(text_cleaning)\n","df.sample(5)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>tweet</th>\n","      <th>retweets</th>\n","      <th>likes</th>\n","      <th>sentiment</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>1195</th>\n","      <td>child must vaccinated mr vaccine mrcampaign ut...</td>\n","      <td>58.0</td>\n","      <td>504.0</td>\n","      <td>neutral</td>\n","    </tr>\n","    <tr>\n","      <th>1084</th>\n","      <td>intensified missionindradhanush reaching unrea...</td>\n","      <td>13.0</td>\n","      <td>25.0</td>\n","      <td>negative</td>\n","    </tr>\n","    <tr>\n","      <th>848</th>\n","      <td>know measlesrubella mr vaccine one vaccine pro...</td>\n","      <td>32.0</td>\n","      <td>151.0</td>\n","      <td>positive</td>\n","    </tr>\n","    <tr>\n","      <th>1764</th>\n","      <td>immunization child responsibility entire famil...</td>\n","      <td>3.0</td>\n","      <td>1.0</td>\n","      <td>negative</td>\n","    </tr>\n","    <tr>\n","      <th>91</th>\n","      <td>city task force meeting measlesrubella vaccina...</td>\n","      <td>1.0</td>\n","      <td>11.0</td>\n","      <td>neutral</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                                                  tweet  ...  sentiment\n","1195  child must vaccinated mr vaccine mrcampaign ut...  ...    neutral\n","1084  intensified missionindradhanush reaching unrea...  ...   negative\n","848   know measlesrubella mr vaccine one vaccine pro...  ...   positive\n","1764  immunization child responsibility entire famil...  ...   negative\n","91    city task force meeting measlesrubella vaccina...  ...    neutral\n","\n","[5 rows x 4 columns]"]},"metadata":{"tags":[]},"execution_count":142}]},{"cell_type":"markdown","metadata":{"id":"Ve5fMuCicKkt"},"source":["#### Feature Engineering "]},{"cell_type":"code","metadata":{"id":"ffgJr5ZYaYac"},"source":["# We will create a custom function that will contain all the \n","# feature engineering techniques. We can then use the function for cleaning new data. \n","# ---\n","#\n","def feature_engineering(tweet):\n","  # Length of tweet\n","  df['length_of_tweet'] = df.tweet.str.len()\n","\n","  # Word count \n","  df['word_count'] = df.tweet.apply(lambda x: len(str(x).split(\" \")))\n","\n","  # Word density (Average no. of words / tweet)\n","  df['avg_word_length'] = df.tweet.apply(lambda x: avg_word(x)) \n","  \n","  # Noun Count\n","  df['noun_count'] = df.tweet.apply(lambda x: pos_check(x, 'noun'))\n","\n","  # Verb Count\n","  df['verb_count'] = df.tweet.apply(lambda x: pos_check(x, 'verb'))\n","\n","  # Adjective Count / Tweet\n","  df['adj_count'] = df.tweet.apply(lambda x: pos_check(x, 'adj'))\n","\n","  # Adverb Count / Tweet\n","  df['adv_count'] = df.tweet.apply(lambda x: pos_check(x, 'adv'))\n","\n","  # Pronoun \n","  df['pron_count'] = df.tweet.apply(lambda x: pos_check(x, 'pron'))\n","\n","  # Subjectivity \n","  df['subjectivity'] = df.tweet.apply(get_subjectivity)\n","\n","  # Polarity\n","  df['polarity'] = df.tweet.apply(get_polarity)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"fG_m8JItbCtI","colab":{"base_uri":"https://localhost:8080/","height":394},"executionInfo":{"status":"ok","timestamp":1599515871520,"user_tz":-180,"elapsed":158274,"user":{"displayName":"Valentine Mwangi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgxlHLHVxIvBcRWF_w0UHnJeDAm5HF8Pv_ekfIQejpiEN_BNKLDQtkww25PSbq7hhs8KIiiGHWhU1ngsVQysnGXFz-tz3PRtvGxpIcY20-JUiYe7DaqXiwROrE-jomhCEphqcQmta1BM-qMJiAp7U8oDZRE16rHtMMiloux_iF90Zq0U0PrlY23Jno0hzI1ZMqYP7aPCklRKuYXLZK720s7pkPR1Nexs8gfxKZ8FJsN4x05TGAyPc4VcpmiNGTs8kQSn9HIQYXyR_LyFfpluQR3Mbkh1RWUyE-c45oJLOl0YdKZ_mNiZQCNER8W8jdQYQssZ_JZc-cMCR9ZLR_fhvCC75h4g8fxGc7aNofeuDAlmdzlf2zMTTiST09FQdOwX3Iw6Y-xnRJzP84gqIhPMXjLukS7OnkUmxsRcOPcs-FmxyONrTI0o7ITfuCqAnqHPyWy2-YTRxzjbOYW4gXMlCrLuS-75r_1llBDsE0FQHfQiobcZGHrb-gZwUSX9e4M4TXBKLi2mo5gzC8DV28nBPpGIbN1Nd02xX-9GDXpFFObik_uh-Ext0kqOvOXWl88ffwUf8iu9n7rebAf7zA7_NP8jFto6mV5xOUKIrqmULJj-pp3R7NFRnq99Ja8L5v3MwCtqtTla4cORPEoeO7WQZiostul11t7HVszk6QU5Hz4KrR9Xq-6JixUrysImIfXOLj7X4NG-N6db_M03SjXrwYNHzBcMAvnc4UutYNaeVdukCMAvpILW3wRV7ED_e2UkMPOmA=s64","userId":"06508552341818475520"}},"outputId":"fed4f5ae-dd48-4ece-dda4-df8ead3fa393"},"source":["# Applying the custom feature engineering function to our dataframe.\n","# This process may take 2-5 min.\n","# ---\n","#\n","df.tweet.apply(feature_engineering)\n","df.sample(5)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>tweet</th>\n","      <th>retweets</th>\n","      <th>likes</th>\n","      <th>sentiment</th>\n","      <th>length_of_tweet</th>\n","      <th>word_count</th>\n","      <th>avg_word_length</th>\n","      <th>noun_count</th>\n","      <th>verb_count</th>\n","      <th>adj_count</th>\n","      <th>adv_count</th>\n","      <th>pron_count</th>\n","      <th>subjectivity</th>\n","      <th>polarity</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>732</th>\n","      <td>ensure fullyimmunizedeverychild chance healthi...</td>\n","      <td>33.0</td>\n","      <td>83.0</td>\n","      <td>neutral</td>\n","      <td>101</td>\n","      <td>11</td>\n","      <td>8.272727</td>\n","      <td>7</td>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>1167</th>\n","      <td>target achieve nhmodisha cdmobhadrak mrcampaig...</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>positive</td>\n","      <td>71</td>\n","      <td>6</td>\n","      <td>11.000000</td>\n","      <td>4</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>989</th>\n","      <td>child madarsa islamnagar uttarakhand proudly r...</td>\n","      <td>41.0</td>\n","      <td>266.0</td>\n","      <td>neutral</td>\n","      <td>192</td>\n","      <td>16</td>\n","      <td>11.062500</td>\n","      <td>13</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>830</th>\n","      <td>hope reach child india measlesrubella vaccinat...</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>positive</td>\n","      <td>128</td>\n","      <td>12</td>\n","      <td>9.750000</td>\n","      <td>10</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>124</th>\n","      <td>super cool x2 twin ganga jamuna kashipal prima...</td>\n","      <td>19.0</td>\n","      <td>60.0</td>\n","      <td>positive</td>\n","      <td>224</td>\n","      <td>26</td>\n","      <td>7.653846</td>\n","      <td>16</td>\n","      <td>1</td>\n","      <td>7</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                                                  tweet  ...  polarity\n","732   ensure fullyimmunizedeverychild chance healthi...  ...       0.0\n","1167  target achieve nhmodisha cdmobhadrak mrcampaig...  ...       0.0\n","989   child madarsa islamnagar uttarakhand proudly r...  ...       0.0\n","830   hope reach child india measlesrubella vaccinat...  ...       0.0\n","124   super cool x2 twin ganga jamuna kashipal prima...  ...       0.0\n","\n","[5 rows x 14 columns]"]},"metadata":{"tags":[]},"execution_count":144}]},{"cell_type":"code","metadata":{"id":"e6sU3heikDWC"},"source":["# Performing further feature engineering techniques\n","# ---\n","#\n","\n","# Feature Construction: Word Level N-Gram TF-IDF Feature \n","tfidf = TfidfVectorizer(max_features=1000, lowercase=True, analyzer='word', ngram_range=(1,3),  stop_words= 'english')\n","df_word_vect = tfidf.fit_transform(df.tweet) \n","\n","# Feature Construction: Character Level N-Gram TF-IDF \n","tfidf = TfidfVectorizer(max_features=1000, lowercase=True, analyzer='char', ngram_range=(1,3),  stop_words= 'english')\n","df_char_vect = tfidf.fit_transform(df.tweet)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"vOt6h3WoxJqk","colab":{"base_uri":"https://localhost:8080/","height":221},"executionInfo":{"status":"ok","timestamp":1599517057632,"user_tz":-180,"elapsed":2186,"user":{"displayName":"Valentine Mwangi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgxlHLHVxIvBcRWF_w0UHnJeDAm5HF8Pv_ekfIQejpiEN_BNKLDQtkww25PSbq7hhs8KIiiGHWhU1ngsVQysnGXFz-tz3PRtvGxpIcY20-JUiYe7DaqXiwROrE-jomhCEphqcQmta1BM-qMJiAp7U8oDZRE16rHtMMiloux_iF90Zq0U0PrlY23Jno0hzI1ZMqYP7aPCklRKuYXLZK720s7pkPR1Nexs8gfxKZ8FJsN4x05TGAyPc4VcpmiNGTs8kQSn9HIQYXyR_LyFfpluQR3Mbkh1RWUyE-c45oJLOl0YdKZ_mNiZQCNER8W8jdQYQssZ_JZc-cMCR9ZLR_fhvCC75h4g8fxGc7aNofeuDAlmdzlf2zMTTiST09FQdOwX3Iw6Y-xnRJzP84gqIhPMXjLukS7OnkUmxsRcOPcs-FmxyONrTI0o7ITfuCqAnqHPyWy2-YTRxzjbOYW4gXMlCrLuS-75r_1llBDsE0FQHfQiobcZGHrb-gZwUSX9e4M4TXBKLi2mo5gzC8DV28nBPpGIbN1Nd02xX-9GDXpFFObik_uh-Ext0kqOvOXWl88ffwUf8iu9n7rebAf7zA7_NP8jFto6mV5xOUKIrqmULJj-pp3R7NFRnq99Ja8L5v3MwCtqtTla4cORPEoeO7WQZiostul11t7HVszk6QU5Hz4KrR9Xq-6JixUrysImIfXOLj7X4NG-N6db_M03SjXrwYNHzBcMAvnc4UutYNaeVdukCMAvpILW3wRV7ED_e2UkMPOmA=s64","userId":"06508552341818475520"}},"outputId":"30594bbb-8d41-497f-c856-8e2c2c4b08ae"},"source":["# Label Preparation i.e. replacing categorial values with numerical ones\n","# ---  \n","#\n","y = np.array(df['sentiment'].replace(['neutral', 'positive', 'negative'], ['0','1','2']))\n","y"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array(['0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0',\n","       '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0',\n","       '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0',\n","       '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '2', '2',\n","       '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2',\n","       '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2',\n","       '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2',\n","       '2', '2', '2', '2', '2', '2', '2', '2', '2', '1', '1', '1', '1',\n","       '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1',\n","       '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1',\n","       '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1',\n","       '1', '1', '1', '1', '1', '1', '1'], dtype=object)"]},"metadata":{"tags":[]},"execution_count":146}]},{"cell_type":"code","metadata":{"id":"75PUieNPl6j5","colab":{"base_uri":"https://localhost:8080/","height":238},"executionInfo":{"status":"ok","timestamp":1599517359613,"user_tz":-180,"elapsed":1145,"user":{"displayName":"Valentine Mwangi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgxlHLHVxIvBcRWF_w0UHnJeDAm5HF8Pv_ekfIQejpiEN_BNKLDQtkww25PSbq7hhs8KIiiGHWhU1ngsVQysnGXFz-tz3PRtvGxpIcY20-JUiYe7DaqXiwROrE-jomhCEphqcQmta1BM-qMJiAp7U8oDZRE16rHtMMiloux_iF90Zq0U0PrlY23Jno0hzI1ZMqYP7aPCklRKuYXLZK720s7pkPR1Nexs8gfxKZ8FJsN4x05TGAyPc4VcpmiNGTs8kQSn9HIQYXyR_LyFfpluQR3Mbkh1RWUyE-c45oJLOl0YdKZ_mNiZQCNER8W8jdQYQssZ_JZc-cMCR9ZLR_fhvCC75h4g8fxGc7aNofeuDAlmdzlf2zMTTiST09FQdOwX3Iw6Y-xnRJzP84gqIhPMXjLukS7OnkUmxsRcOPcs-FmxyONrTI0o7ITfuCqAnqHPyWy2-YTRxzjbOYW4gXMlCrLuS-75r_1llBDsE0FQHfQiobcZGHrb-gZwUSX9e4M4TXBKLi2mo5gzC8DV28nBPpGIbN1Nd02xX-9GDXpFFObik_uh-Ext0kqOvOXWl88ffwUf8iu9n7rebAf7zA7_NP8jFto6mV5xOUKIrqmULJj-pp3R7NFRnq99Ja8L5v3MwCtqtTla4cORPEoeO7WQZiostul11t7HVszk6QU5Hz4KrR9Xq-6JixUrysImIfXOLj7X4NG-N6db_M03SjXrwYNHzBcMAvnc4UutYNaeVdukCMAvpILW3wRV7ED_e2UkMPOmA=s64","userId":"06508552341818475520"}},"outputId":"2e086437-a6fa-41bd-8a5e-18c8e85b2ab3"},"source":["# Let's prepare the constructed features for modeling\n","# ---\n","# We will select all columns but the sentiment (which is the label) and tweet columns \n","# ---\n","#  \n","X_metadata = np.array(df[df.columns.difference(['sentiment', 'tweet'])])\n","X_metadata"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[ 3.        ,  0.        ,  9.73684211, ...,  0.        ,\n","         4.        , 19.        ],\n","       [ 2.        ,  0.        ,  9.66666667, ...,  0.        ,\n","         3.        , 18.        ],\n","       [ 2.        ,  1.        ,  9.05882353, ...,  0.        ,\n","         3.        , 17.        ],\n","       ...,\n","       [ 2.        ,  1.        , 10.5       , ...,  0.        ,\n","         2.        , 12.        ],\n","       [ 3.        ,  0.        ,  9.27272727, ...,  0.        ,\n","         3.        , 11.        ],\n","       [ 4.        ,  1.        ,  7.66666667, ...,  0.        ,\n","         3.        , 21.        ]])"]},"metadata":{"tags":[]},"execution_count":147}]},{"cell_type":"code","metadata":{"id":"Wn_kBCljx6PS","colab":{"base_uri":"https://localhost:8080/","height":51},"executionInfo":{"status":"ok","timestamp":1599517363261,"user_tz":-180,"elapsed":1107,"user":{"displayName":"Valentine Mwangi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgxlHLHVxIvBcRWF_w0UHnJeDAm5HF8Pv_ekfIQejpiEN_BNKLDQtkww25PSbq7hhs8KIiiGHWhU1ngsVQysnGXFz-tz3PRtvGxpIcY20-JUiYe7DaqXiwROrE-jomhCEphqcQmta1BM-qMJiAp7U8oDZRE16rHtMMiloux_iF90Zq0U0PrlY23Jno0hzI1ZMqYP7aPCklRKuYXLZK720s7pkPR1Nexs8gfxKZ8FJsN4x05TGAyPc4VcpmiNGTs8kQSn9HIQYXyR_LyFfpluQR3Mbkh1RWUyE-c45oJLOl0YdKZ_mNiZQCNER8W8jdQYQssZ_JZc-cMCR9ZLR_fhvCC75h4g8fxGc7aNofeuDAlmdzlf2zMTTiST09FQdOwX3Iw6Y-xnRJzP84gqIhPMXjLukS7OnkUmxsRcOPcs-FmxyONrTI0o7ITfuCqAnqHPyWy2-YTRxzjbOYW4gXMlCrLuS-75r_1llBDsE0FQHfQiobcZGHrb-gZwUSX9e4M4TXBKLi2mo5gzC8DV28nBPpGIbN1Nd02xX-9GDXpFFObik_uh-Ext0kqOvOXWl88ffwUf8iu9n7rebAf7zA7_NP8jFto6mV5xOUKIrqmULJj-pp3R7NFRnq99Ja8L5v3MwCtqtTla4cORPEoeO7WQZiostul11t7HVszk6QU5Hz4KrR9Xq-6JixUrysImIfXOLj7X4NG-N6db_M03SjXrwYNHzBcMAvnc4UutYNaeVdukCMAvpILW3wRV7ED_e2UkMPOmA=s64","userId":"06508552341818475520"}},"outputId":"d147cf38-6915-4535-9f7e-925b1bc7034b"},"source":["# We combine our two tfidf (sparse) matrices and X_metadata\n","# ---\n","#\n","X = scipy.sparse.hstack([df_word_vect, df_char_vect, X_metadata])\n","X"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<150x2012 sparse matrix of type '<class 'numpy.float64'>'\n","\twith 36494 stored elements in COOrdinate format>"]},"metadata":{"tags":[]},"execution_count":148}]},{"cell_type":"markdown","metadata":{"id":"O_iOhAPnaERN"},"source":["### Data Modelling"]},{"cell_type":"markdown","metadata":{"id":"0BKyd7Uwl-Vr"},"source":["In this step we use machine learning algorithms to train and test our sentiment analysis models."]},{"cell_type":"code","metadata":{"id":"533B2cK_Ey3Z"},"source":["# Splitting our data\n","# ---\n","#\n","from sklearn.model_selection import train_test_split\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Zx3rCuu6ddht","colab":{"base_uri":"https://localhost:8080/","height":190},"executionInfo":{"status":"ok","timestamp":1599517378331,"user_tz":-180,"elapsed":6989,"user":{"displayName":"Valentine Mwangi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgxlHLHVxIvBcRWF_w0UHnJeDAm5HF8Pv_ekfIQejpiEN_BNKLDQtkww25PSbq7hhs8KIiiGHWhU1ngsVQysnGXFz-tz3PRtvGxpIcY20-JUiYe7DaqXiwROrE-jomhCEphqcQmta1BM-qMJiAp7U8oDZRE16rHtMMiloux_iF90Zq0U0PrlY23Jno0hzI1ZMqYP7aPCklRKuYXLZK720s7pkPR1Nexs8gfxKZ8FJsN4x05TGAyPc4VcpmiNGTs8kQSn9HIQYXyR_LyFfpluQR3Mbkh1RWUyE-c45oJLOl0YdKZ_mNiZQCNER8W8jdQYQssZ_JZc-cMCR9ZLR_fhvCC75h4g8fxGc7aNofeuDAlmdzlf2zMTTiST09FQdOwX3Iw6Y-xnRJzP84gqIhPMXjLukS7OnkUmxsRcOPcs-FmxyONrTI0o7ITfuCqAnqHPyWy2-YTRxzjbOYW4gXMlCrLuS-75r_1llBDsE0FQHfQiobcZGHrb-gZwUSX9e4M4TXBKLi2mo5gzC8DV28nBPpGIbN1Nd02xX-9GDXpFFObik_uh-Ext0kqOvOXWl88ffwUf8iu9n7rebAf7zA7_NP8jFto6mV5xOUKIrqmULJj-pp3R7NFRnq99Ja8L5v3MwCtqtTla4cORPEoeO7WQZiostul11t7HVszk6QU5Hz4KrR9Xq-6JixUrysImIfXOLj7X4NG-N6db_M03SjXrwYNHzBcMAvnc4UutYNaeVdukCMAvpILW3wRV7ED_e2UkMPOmA=s64","userId":"06508552341818475520"}},"outputId":"dfcfb067-1ffc-4e9b-8eb5-5a0153152885"},"source":["# Fitting our model\n","# ---\n","#\n","\n","# Importing the algorithms\n","# ---\n","# \n","from sklearn.linear_model import LogisticRegression      # Logistic Regression Classifier\n","from sklearn.tree import DecisionTreeClassifier          # Decision Tree Classifier\n","from sklearn.svm import SVC                              # SVM Classifier\n","from sklearn.naive_bayes import MultinomialNB            # Naive Bayes Classifier\n","from sklearn.neighbors import KNeighborsClassifier       # KNN Classifier\n","\n","# Ensemble classifiers\n","from sklearn.ensemble import BaggingClassifier           # Bagging Meta-Estimator Classifier\n","from sklearn.ensemble import RandomForestClassifier      # RandomForest Classifier \n","from sklearn.ensemble import AdaBoostClassifier          # AdaBoost Classifier\n","from sklearn.ensemble import GradientBoostingClassifier  # AdaBoost GradientBoostingClassifier\n","import xgboost as xgb                                    # Importing the XGBoost library\n","\n","\n","# Instantiating our models\n","# ---\n","#\n","logistic_classifier = LogisticRegression(solver='saga', max_iter=800, multi_class='multinomial') # solver works well with a large dataset like ours\n","decision_classifier = DecisionTreeClassifier(random_state=42)\n","svm_classifier = SVC()\n","knn_classifier = KNeighborsClassifier()\n","naive_classifier = MultinomialNB() \n","\n","bagging_meta_classifier = BaggingClassifier()\n","random_forest_classifier = RandomForestClassifier()\n","ada_boost_classifier = AdaBoostClassifier(random_state=42)\n","gbm_classifier = GradientBoostingClassifier(random_state=42) \n","xg_boost_classifier = xgb.XGBClassifier() \n","\n","# Training our models\n","# ---\n","#  \n","logistic_classifier.fit(X_train, y_train)\n","decision_classifier.fit(X_train, y_train)\n","svm_classifier.fit(X_train, y_train)\n","knn_classifier.fit(X_train, y_train)\n","naive_classifier.fit(X_train, y_train) \n","\n","bagging_meta_classifier.fit(X_train, y_train)\n","random_forest_classifier.fit(X_train, y_train)\n","ada_boost_classifier.fit(X_train, y_train)\n","gbm_classifier.fit(X_train, y_train)\n","xg_boost_classifier.fit(X_train, y_train)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/_sag.py:330: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n","  \"the coef_ did not converge\", ConvergenceWarning)\n"],"name":"stderr"},{"output_type":"execute_result","data":{"text/plain":["XGBClassifier(base_score=0.5, booster='gbtree', colsample_bylevel=1,\n","              colsample_bynode=1, colsample_bytree=1, gamma=0,\n","              learning_rate=0.1, max_delta_step=0, max_depth=3,\n","              min_child_weight=1, missing=None, n_estimators=100, n_jobs=1,\n","              nthread=None, objective='multi:softprob', random_state=0,\n","              reg_alpha=0, reg_lambda=1, scale_pos_weight=1, seed=None,\n","              silent=None, subsample=1, verbosity=1)"]},"metadata":{"tags":[]},"execution_count":150}]},{"cell_type":"code","metadata":{"id":"grL4WhdTYu5g"},"source":["# Making predictions\n","# ---\n","#\n","logistic_y_prediction = logistic_classifier.predict(X_test) \n","decision_y_prediction = decision_classifier.predict(X_test) \n","svm_y_prediction = svm_classifier.predict(X_test) \n","knn_y_prediction = knn_classifier.predict(X_test) \n","naive_y_prediction = naive_classifier.predict(X_test)  \n","\n","bagging_y_classifier = bagging_meta_classifier.predict(X_test) \n","random_forest_y_classifier = random_forest_classifier.predict(X_test) \n","ada_boost_y_classifier = ada_boost_classifier.predict(X_test)\n","gbm_y_classifier = gbm_classifier.predict(X_test)\n","xg_boost_y_classifier = xg_boost_classifier.predict(X_test)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"pyb3cihzdlKX","colab":{"base_uri":"https://localhost:8080/","height":187},"executionInfo":{"status":"ok","timestamp":1599520888629,"user_tz":-180,"elapsed":3121,"user":{"displayName":"Valentine Mwangi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgxlHLHVxIvBcRWF_w0UHnJeDAm5HF8Pv_ekfIQejpiEN_BNKLDQtkww25PSbq7hhs8KIiiGHWhU1ngsVQysnGXFz-tz3PRtvGxpIcY20-JUiYe7DaqXiwROrE-jomhCEphqcQmta1BM-qMJiAp7U8oDZRE16rHtMMiloux_iF90Zq0U0PrlY23Jno0hzI1ZMqYP7aPCklRKuYXLZK720s7pkPR1Nexs8gfxKZ8FJsN4x05TGAyPc4VcpmiNGTs8kQSn9HIQYXyR_LyFfpluQR3Mbkh1RWUyE-c45oJLOl0YdKZ_mNiZQCNER8W8jdQYQssZ_JZc-cMCR9ZLR_fhvCC75h4g8fxGc7aNofeuDAlmdzlf2zMTTiST09FQdOwX3Iw6Y-xnRJzP84gqIhPMXjLukS7OnkUmxsRcOPcs-FmxyONrTI0o7ITfuCqAnqHPyWy2-YTRxzjbOYW4gXMlCrLuS-75r_1llBDsE0FQHfQiobcZGHrb-gZwUSX9e4M4TXBKLi2mo5gzC8DV28nBPpGIbN1Nd02xX-9GDXpFFObik_uh-Ext0kqOvOXWl88ffwUf8iu9n7rebAf7zA7_NP8jFto6mV5xOUKIrqmULJj-pp3R7NFRnq99Ja8L5v3MwCtqtTla4cORPEoeO7WQZiostul11t7HVszk6QU5Hz4KrR9Xq-6JixUrysImIfXOLj7X4NG-N6db_M03SjXrwYNHzBcMAvnc4UutYNaeVdukCMAvpILW3wRV7ED_e2UkMPOmA=s64","userId":"06508552341818475520"}},"outputId":"b15780b3-e928-41d7-a644-facf7d393389"},"source":["# Evaluating the Models\n","# ---\n","from sklearn.metrics import classification_report, confusion_matrix, accuracy_score\n","\n","# Accuracy scores\n","#\n","print(\"Logistic Regression Classifier\", accuracy_score(logistic_y_prediction, y_test))\n","print(\"Decision Trees Classifier\", accuracy_score(decision_y_prediction, y_test))\n","print(\"SVN Classifier\", accuracy_score(svm_y_prediction, y_test))\n","print(\"KNN Classifier\", accuracy_score(knn_y_prediction, y_test))\n","print(\"Naive Bayes Classifier\", accuracy_score(naive_y_prediction, y_test))\n"," \n","print(\"Bagging Classifier\", accuracy_score(bagging_y_classifier, y_test))\n","print(\"Random Forest Classifier\", accuracy_score(random_forest_y_classifier, y_test))\n","print(\"Ada Boost Classifier\", accuracy_score(ada_boost_y_classifier, y_test))\n","print(\"GBM Classifier\", accuracy_score(gbm_y_classifier, y_test))\n","print(\"XGBoost Classifier\", accuracy_score(xg_boost_y_classifier, y_test))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Logistic Regression Classifier 0.43333333333333335\n","Decision Trees Classifier 0.5\n","SVN Classifier 0.43333333333333335\n","KNN Classifier 0.4\n","Naive Bayes Classifier 0.5333333333333333\n","Bagging Classifier 0.7333333333333333\n","Random Forest Classifier 0.6666666666666666\n","Ada Boost Classifier 0.7\n","GBM Classifier 0.7666666666666667\n","XGBoost Classifier 0.8666666666666667\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"T8eSbABzrWGg"},"source":["We could use the accuracy as a reliable metric because our dataset was balanced."]},{"cell_type":"code","metadata":{"id":"obyOpb9uD9IM","colab":{"base_uri":"https://localhost:8080/","height":697},"executionInfo":{"status":"ok","timestamp":1599517483386,"user_tz":-180,"elapsed":1320,"user":{"displayName":"Valentine Mwangi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgxlHLHVxIvBcRWF_w0UHnJeDAm5HF8Pv_ekfIQejpiEN_BNKLDQtkww25PSbq7hhs8KIiiGHWhU1ngsVQysnGXFz-tz3PRtvGxpIcY20-JUiYe7DaqXiwROrE-jomhCEphqcQmta1BM-qMJiAp7U8oDZRE16rHtMMiloux_iF90Zq0U0PrlY23Jno0hzI1ZMqYP7aPCklRKuYXLZK720s7pkPR1Nexs8gfxKZ8FJsN4x05TGAyPc4VcpmiNGTs8kQSn9HIQYXyR_LyFfpluQR3Mbkh1RWUyE-c45oJLOl0YdKZ_mNiZQCNER8W8jdQYQssZ_JZc-cMCR9ZLR_fhvCC75h4g8fxGc7aNofeuDAlmdzlf2zMTTiST09FQdOwX3Iw6Y-xnRJzP84gqIhPMXjLukS7OnkUmxsRcOPcs-FmxyONrTI0o7ITfuCqAnqHPyWy2-YTRxzjbOYW4gXMlCrLuS-75r_1llBDsE0FQHfQiobcZGHrb-gZwUSX9e4M4TXBKLi2mo5gzC8DV28nBPpGIbN1Nd02xX-9GDXpFFObik_uh-Ext0kqOvOXWl88ffwUf8iu9n7rebAf7zA7_NP8jFto6mV5xOUKIrqmULJj-pp3R7NFRnq99Ja8L5v3MwCtqtTla4cORPEoeO7WQZiostul11t7HVszk6QU5Hz4KrR9Xq-6JixUrysImIfXOLj7X4NG-N6db_M03SjXrwYNHzBcMAvnc4UutYNaeVdukCMAvpILW3wRV7ED_e2UkMPOmA=s64","userId":"06508552341818475520"}},"outputId":"4063bc11-c98b-40df-b54b-80ea0c3d0d46"},"source":["# Confusion matrix\n","# ---\n","# Regardless of the size of the confusion matrix, the method for intepretation is the same. \n","# The left-hand side contains the predicted values and the actual class labels run across the top. \n","# The instances that the classifier has correctly predicted run diagonally from the top-left \n","# to the bottom-right.\n","# --- \n","# \n","print('Logistic Regression Classifier:')\n","print(confusion_matrix(logistic_y_prediction, y_test))\n","\n","print('Decision Trees Classifier:')\n","print(confusion_matrix(decision_y_prediction, y_test))\n","\n","print('SVN Classifier:')\n","print(confusion_matrix(svm_y_prediction, y_test))\n","\n","print('KNN Classifier:')\n","print(confusion_matrix(knn_y_prediction, y_test))\n","\n","print('Naive Bayes Classifier:')\n","print(confusion_matrix(naive_y_prediction, y_test))\n"," \n","print('Bagging Classifier:')\n","print(confusion_matrix(bagging_y_classifier, y_test))\n","\n","print('Random Forest Classifier:')\n","print(confusion_matrix(random_forest_y_classifier, y_test))\n","\n","print('Ada Boost Classifier:')\n","print(confusion_matrix(ada_boost_y_classifier, y_test))\n","\n","print('GBM Classifier:')\n","print(confusion_matrix(gbm_y_classifier, y_test))\n","\n","print('XGBoost Classifier:')\n","print(confusion_matrix(xg_boost_y_classifier, y_test))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Logistic Regression Classifier:\n","[[3 2 5]\n"," [2 7 1]\n"," [5 2 3]]\n","Decision Trees Classifier:\n","[[7 4 3]\n"," [1 4 2]\n"," [2 3 4]]\n","SVN Classifier:\n","[[1 0 2]\n"," [7 9 4]\n"," [2 2 3]]\n","KNN Classifier:\n","[[6 7 4]\n"," [2 4 3]\n"," [2 0 2]]\n","Naive Bayes Classifier:\n","[[1 1 0]\n"," [5 9 3]\n"," [4 1 6]]\n","Bagging Classifier:\n","[[7 2 2]\n"," [1 8 0]\n"," [2 1 7]]\n","Random Forest Classifier:\n","[[5 4 0]\n"," [3 7 1]\n"," [2 0 8]]\n","Ada Boost Classifier:\n","[[5 1 1]\n"," [3 9 1]\n"," [2 1 7]]\n","GBM Classifier:\n","[[8 3 0]\n"," [1 7 1]\n"," [1 1 8]]\n","XGBoost Classifier:\n","[[ 7  1  0]\n"," [ 1 10  0]\n"," [ 2  0  9]]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"dwQ0mOBm-qmP"},"source":["**3x3 Matrix Intepretation: Logistic Regression**\n","\n","Looking at Logistic classification matrix, the first rows are actually 0's, second row 1's and third row 2's. The model predicted 3 of 0's correctly, and incorrectly predicted 2 of the 1's to be 1 and 5 of the 0's to be 2's. \n","\n","\n"]},{"cell_type":"code","metadata":{"id":"SFdanMG4D6Dn","colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"status":"ok","timestamp":1599519200012,"user_tz":-180,"elapsed":1369,"user":{"displayName":"Valentine Mwangi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgxlHLHVxIvBcRWF_w0UHnJeDAm5HF8Pv_ekfIQejpiEN_BNKLDQtkww25PSbq7hhs8KIiiGHWhU1ngsVQysnGXFz-tz3PRtvGxpIcY20-JUiYe7DaqXiwROrE-jomhCEphqcQmta1BM-qMJiAp7U8oDZRE16rHtMMiloux_iF90Zq0U0PrlY23Jno0hzI1ZMqYP7aPCklRKuYXLZK720s7pkPR1Nexs8gfxKZ8FJsN4x05TGAyPc4VcpmiNGTs8kQSn9HIQYXyR_LyFfpluQR3Mbkh1RWUyE-c45oJLOl0YdKZ_mNiZQCNER8W8jdQYQssZ_JZc-cMCR9ZLR_fhvCC75h4g8fxGc7aNofeuDAlmdzlf2zMTTiST09FQdOwX3Iw6Y-xnRJzP84gqIhPMXjLukS7OnkUmxsRcOPcs-FmxyONrTI0o7ITfuCqAnqHPyWy2-YTRxzjbOYW4gXMlCrLuS-75r_1llBDsE0FQHfQiobcZGHrb-gZwUSX9e4M4TXBKLi2mo5gzC8DV28nBPpGIbN1Nd02xX-9GDXpFFObik_uh-Ext0kqOvOXWl88ffwUf8iu9n7rebAf7zA7_NP8jFto6mV5xOUKIrqmULJj-pp3R7NFRnq99Ja8L5v3MwCtqtTla4cORPEoeO7WQZiostul11t7HVszk6QU5Hz4KrR9Xq-6JixUrysImIfXOLj7X4NG-N6db_M03SjXrwYNHzBcMAvnc4UutYNaeVdukCMAvpILW3wRV7ED_e2UkMPOmA=s64","userId":"06508552341818475520"}},"outputId":"4d0619ac-e737-4ea0-fae5-a661ecf4697b"},"source":["# Classification Reports\n","# ---\n","#\n","print(\"Logistic Regression Classifier\", classification_report(logistic_y_prediction, y_test))\n","print(\"Decision Trees Classifier\", classification_report(decision_y_prediction, y_test))\n","print(\"SVM Classifier\", classification_report(svm_y_prediction, y_test))\n","print(\"KNN Classifier\", classification_report(knn_y_prediction, y_test))\n","print(\"Naive Bayes Classifier\", classification_report(naive_y_prediction, y_test))\n"," \n","print(\"Bagging Classifier\", classification_report(bagging_y_classifier, y_test))\n","print(\"Random Forest Classifier\", classification_report(random_forest_y_classifier, y_test))\n","print(\"Ada Boost Classifier\", classification_report(ada_boost_y_classifier, y_test))\n","print(\"GBM Classifier\", classification_report(gbm_y_classifier, y_test))\n","print(\"XGBoost Classifier\", classification_report(xg_boost_y_classifier, y_test))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Logistic Regression Classifier               precision    recall  f1-score   support\n","\n","           0       0.30      0.30      0.30        10\n","           1       0.64      0.70      0.67        10\n","           2       0.33      0.30      0.32        10\n","\n","    accuracy                           0.43        30\n","   macro avg       0.42      0.43      0.43        30\n","weighted avg       0.42      0.43      0.43        30\n","\n","Decision Trees Classifier               precision    recall  f1-score   support\n","\n","           0       0.70      0.50      0.58        14\n","           1       0.36      0.57      0.44         7\n","           2       0.44      0.44      0.44         9\n","\n","    accuracy                           0.50        30\n","   macro avg       0.50      0.51      0.49        30\n","weighted avg       0.54      0.50      0.51        30\n","\n","SVM Classifier               precision    recall  f1-score   support\n","\n","           0       0.10      0.33      0.15         3\n","           1       0.82      0.45      0.58        20\n","           2       0.33      0.43      0.38         7\n","\n","    accuracy                           0.43        30\n","   macro avg       0.42      0.40      0.37        30\n","weighted avg       0.63      0.43      0.49        30\n","\n","KNN Classifier               precision    recall  f1-score   support\n","\n","           0       0.60      0.35      0.44        17\n","           1       0.36      0.44      0.40         9\n","           2       0.22      0.50      0.31         4\n","\n","    accuracy                           0.40        30\n","   macro avg       0.40      0.43      0.38        30\n","weighted avg       0.48      0.40      0.41        30\n","\n","Naive Bayes Classifier               precision    recall  f1-score   support\n","\n","           0       0.10      0.50      0.17         2\n","           1       0.82      0.53      0.64        17\n","           2       0.67      0.55      0.60        11\n","\n","    accuracy                           0.53        30\n","   macro avg       0.53      0.52      0.47        30\n","weighted avg       0.71      0.53      0.60        30\n","\n","Bagging Classifier               precision    recall  f1-score   support\n","\n","           0       0.70      0.64      0.67        11\n","           1       0.73      0.89      0.80         9\n","           2       0.78      0.70      0.74        10\n","\n","    accuracy                           0.73        30\n","   macro avg       0.74      0.74      0.73        30\n","weighted avg       0.73      0.73      0.73        30\n","\n","Random Forest Classifier               precision    recall  f1-score   support\n","\n","           0       0.50      0.56      0.53         9\n","           1       0.64      0.64      0.64        11\n","           2       0.89      0.80      0.84        10\n","\n","    accuracy                           0.67        30\n","   macro avg       0.68      0.66      0.67        30\n","weighted avg       0.68      0.67      0.67        30\n","\n","Ada Boost Classifier               precision    recall  f1-score   support\n","\n","           0       0.50      0.71      0.59         7\n","           1       0.82      0.69      0.75        13\n","           2       0.78      0.70      0.74        10\n","\n","    accuracy                           0.70        30\n","   macro avg       0.70      0.70      0.69        30\n","weighted avg       0.73      0.70      0.71        30\n","\n","GBM Classifier               precision    recall  f1-score   support\n","\n","           0       0.80      0.73      0.76        11\n","           1       0.64      0.78      0.70         9\n","           2       0.89      0.80      0.84        10\n","\n","    accuracy                           0.77        30\n","   macro avg       0.78      0.77      0.77        30\n","weighted avg       0.78      0.77      0.77        30\n","\n","XGBoost Classifier               precision    recall  f1-score   support\n","\n","           0       0.70      0.88      0.78         8\n","           1       0.91      0.91      0.91        11\n","           2       1.00      0.82      0.90        11\n","\n","    accuracy                           0.87        30\n","   macro avg       0.87      0.87      0.86        30\n","weighted avg       0.89      0.87      0.87        30\n","\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"gxETCaYyOyHv"},"source":["**Evaluation our Models**\n","\n","* **Accuracy:** the percentage of texts that were assigned the correct topic.\n","* **Precision:** the percentage of texts the classifier classified correctly out of the total number of texts it predicted for each topic\n","* **Recall:** the percentage of texts the model predicted for each topic out of the total number of texts it should have predicted for that topic.\n","* **F1 Score:** the average of both precision and recall."]},{"cell_type":"markdown","metadata":{"id":"keZ-ozcdb4ED"},"source":["### Recommendation"]},{"cell_type":"markdown","metadata":{"id":"dbisAqRswA80"},"source":["Our best performing model was XG Boost. To improve our model, we can try perfoming other text processing techniques that would better prepare our data for fitting our model. We can also use different vectorizing techniques, implement other machine learning models, perform hyperparameter tuning and sample a balanced dataset."]},{"cell_type":"markdown","metadata":{"id":"tsBNmFdCNNb6"},"source":["## <font color=\"green\">Challenges</font>"]},{"cell_type":"markdown","metadata":{"id":"q17iZTtfH79K"},"source":["### <font color=\"green\">Challenge 1</font>"]},{"cell_type":"code","metadata":{"id":"YqJgGP3mHRcs","colab":{"base_uri":"https://localhost:8080/","height":204},"executionInfo":{"status":"ok","timestamp":1627048341977,"user_tz":-180,"elapsed":2733,"user":{"displayName":"Kuria K. Ken","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhnEdqxk2Mp_jIE4QawUovTRuGsreOMU5LcwWtLIw=s64","userId":"18249265223060828810"}},"outputId":"438d038e-c12c-4a5c-8de8-75896c77d199"},"source":["# Challenge 1\n","# ---\n","# Given the following dataset, create a classification model that will best \n","# accurately predict whether a tweet talks about cancer disease.\n","# ---\n","# Dataset URL = https://bit.ly/3h2hDuw\n","# Hint: This is a tsv file i.e. it has a .tsv extension\n","# ---\n","# YOUR CODE GOES BELOW\n","# \n","\n","# Data Importation\n","# ---\n","#\n","df = pd.read_csv('https://bit.ly/3h2hDuw', sep = '\\t')\n","df.columns = ['text', 'target']\n","df.head()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>text</th>\n","      <th>target</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>RT @TommySobiesski: you could give GameStop th...</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>This last year has been the hardest of my life...</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>The year is 2043. You opened your newspaper an...</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>RT @gorskon: Here we go again. Yet another dub...</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>So sick of festival kids fingering themselves ...</td>\n","      <td>no</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                                                text target\n","0  RT @TommySobiesski: you could give GameStop th...     no\n","1  This last year has been the hardest of my life...     no\n","2  The year is 2043. You opened your newspaper an...     no\n","3  RT @gorskon: Here we go again. Yet another dub...     no\n","4  So sick of festival kids fingering themselves ...     no"]},"metadata":{"tags":[]},"execution_count":5}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":204},"id":"so9Mdyh6obgN","executionInfo":{"status":"ok","timestamp":1627050835026,"user_tz":-180,"elapsed":649,"user":{"displayName":"Kuria K. Ken","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhnEdqxk2Mp_jIE4QawUovTRuGsreOMU5LcwWtLIw=s64","userId":"18249265223060828810"}},"outputId":"478e3438-e6cb-41cf-8f75-c7448d3a15a2"},"source":["df.shape\n","df.sample(5)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>text</th>\n","      <th>target</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>140</th>\n","      <td>RT @LunaCee73: Kaitlyn is convinced that the U...</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>489</th>\n","      <td>Immunotherapy Vaccine Shows Great Promise in T...</td>\n","      <td>yes</td>\n","    </tr>\n","    <tr>\n","      <th>1440</th>\n","      <td>@americafirst181 They wouldn't be Happy if @PO...</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>787</th>\n","      <td>@EdKrassen Based on what Trump did to defend t...</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>551</th>\n","      <td>Published in journal Cancer Cell: targeting CA...</td>\n","      <td>yes</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                                                   text target\n","140   RT @LunaCee73: Kaitlyn is convinced that the U...     no\n","489   Immunotherapy Vaccine Shows Great Promise in T...    yes\n","1440  @americafirst181 They wouldn't be Happy if @PO...     no\n","787   @EdKrassen Based on what Trump did to defend t...     no\n","551   Published in journal Cancer Cell: targeting CA...    yes"]},"metadata":{"tags":[]},"execution_count":29}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":562},"id":"Rechqd8tpOid","executionInfo":{"status":"error","timestamp":1627050805387,"user_tz":-180,"elapsed":707,"user":{"displayName":"Kuria K. Ken","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhnEdqxk2Mp_jIE4QawUovTRuGsreOMU5LcwWtLIw=s64","userId":"18249265223060828810"}},"outputId":"ea3d86fb-d862-45f4-8c44-69f0573a2225"},"source":["sample_df = df.sample(200)\n","# sampling tweets with neutral cancer disease.\n","df_neutral = df[df[\"cancer\"] == 'neutral'] \n","df_neutral = df_neutral.sample(50)\n","\n","# sampling tweets with negative sentiments\n","df_negative = df[df[\"cancer\"] == 'negative'] \n","df_negative = df_negative.sample(50)\n","\n","# sampling tweets positive\n","df_positive = df[df[\"cancer\"] == 'positive'] \n","df_positive = df_positive.sample(50)\n","\n","# combining our dataframes\n","df = pd.concat([df_neutral, df_negative, df_positive])\n","df.head()\n","sns.countplot(sample_df[\"cancer\"]);"],"execution_count":null,"outputs":[{"output_type":"error","ename":"KeyError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36mget_loc\u001b[0;34m(self, key, method, tolerance)\u001b[0m\n\u001b[1;32m   2897\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2898\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcasted_key\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2899\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mKeyError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0merr\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32mpandas/_libs/index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n","\u001b[0;32mpandas/_libs/index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n","\u001b[0;32mpandas/_libs/hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n","\u001b[0;32mpandas/_libs/hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n","\u001b[0;31mKeyError\u001b[0m: 'cancer'","\nThe above exception was the direct cause of the following exception:\n","\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)","\u001b[0;32m<ipython-input-28-bfe01076ed73>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0msample_df\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msample\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m200\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;31m# sampling tweets with neutral cancer disease.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0mdf_neutral\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mdf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"cancer\"\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m'neutral'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m \u001b[0mdf_neutral\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdf_neutral\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msample\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m50\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36m__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   2904\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnlevels\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2905\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_getitem_multilevel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2906\u001b[0;31m             \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2907\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mis_integer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2908\u001b[0m                 \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36mget_loc\u001b[0;34m(self, key, method, tolerance)\u001b[0m\n\u001b[1;32m   2898\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcasted_key\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2899\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mKeyError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0merr\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2900\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0merr\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2901\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2902\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mtolerance\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyError\u001b[0m: 'cancer'"]}]},{"cell_type":"markdown","metadata":{"id":"xUaJ6znlIAwD"},"source":["### <font color=\"green\">Challenge 2</font>"]},{"cell_type":"code","metadata":{"id":"o9GYPCi3NST1","colab":{"base_uri":"https://localhost:8080/","height":204},"executionInfo":{"status":"ok","timestamp":1627054046288,"user_tz":-180,"elapsed":2391,"user":{"displayName":"Kuria K. Ken","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhnEdqxk2Mp_jIE4QawUovTRuGsreOMU5LcwWtLIw=s64","userId":"18249265223060828810"}},"outputId":"e6cfcf8d-4a31-4ff5-ec2e-b65f3b18399d"},"source":["# Challenge 2\n","# ---\n","# Using the following dataset, create a classification model\n","# that tags new store reviews as either label 1 and label 2.\n","# ---\n","# Dataset URL = https://bit.ly/2PdbtfD\n","# ---\n","# YOUR CODE GOES BELOW\n","\n","df = pd.read_csv('https://bit.ly/2PdbtfD', sep = '\\t')\n","#df.columns = ['Review', 'Label']\n","df.head()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Review,Label</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Stuning even for the non-gamer: This sound tr...</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>The best soundtrack ever to anything.: I'm re...</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Amazing!: This soundtrack is my favorite musi...</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Excellent Soundtrack: I truly like this sound...</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Remember, Pull Your Jaw Off The Floor After H...</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                                        Review,Label\n","0   Stuning even for the non-gamer: This sound tr...\n","1   The best soundtrack ever to anything.: I'm re...\n","2   Amazing!: This soundtrack is my favorite musi...\n","3   Excellent Soundtrack: I truly like this sound...\n","4   Remember, Pull Your Jaw Off The Floor After H..."]},"metadata":{"tags":[]},"execution_count":34}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Bcc1r149w1aV","executionInfo":{"status":"ok","timestamp":1627056845404,"user_tz":-180,"elapsed":866,"user":{"displayName":"Kuria K. Ken","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhnEdqxk2Mp_jIE4QawUovTRuGsreOMU5LcwWtLIw=s64","userId":"18249265223060828810"}},"outputId":"c77b72b7-7bc5-41ff-cdee-29024d548fa6"},"source":["df.shape"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(199, 1)"]},"metadata":{"tags":[]},"execution_count":35}]},{"cell_type":"markdown","metadata":{"id":"AMnB0e4YIErV"},"source":["### <font color=\"green\">Challenge 3</font>"]},{"cell_type":"code","metadata":{"id":"e3v-IWWsNR7j"},"source":["# Challenge 3\n","# ---\n","# Create a classification model that categorizes new texts news \n","# as either fake news or not given the following dataset.\n","# ---\n","# Dataset URL = https://bit.ly/319PifQ\n","# ---\n","# YOUR CODE GOES BELOW"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Btpd2TLcTSKQ"},"source":["### <font color=\"green\">Challenge 4</font>"]},{"cell_type":"code","metadata":{"id":"gj45NBkSTSKW"},"source":["# Challenge 4\n","# ---\n","# The tweets in the given dataset belong to either of the following \n","# categories i.e. sports, politics, medical and entertainment.\n","# Create a classification algorithm that classifies a new tweet to any \n","# of the given categories.  \n","# ---\n","# Dataset URL = https://bit.ly/2DysSx7\n","# Hint: The dataset is in the format: .xlsx\n","# ---\n","# YOUR CODE GOES BELOW"],"execution_count":null,"outputs":[]}]}