{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Copy of AfterWork Data Science: Classification Analysis with Python","provenance":[{"file_id":"1WIoaAcQ-FrjjHoiBOv9KmiVBbYMoruU2","timestamp":1622043411875}],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"mpeR9aETcRDP"},"source":["<font color=\"blue\">To use this notebook on Google Colaboratory, you will need to make a copy of it. Go to **File** > **Save a Copy in Drive**. You can then use the new copy that will appear in the new tab.</font>"]},{"cell_type":"markdown","metadata":{"id":"7e13tRpKcJHm"},"source":["# AfterWork Data Science: Classification Analysis with Python"]},{"cell_type":"markdown","metadata":{"id":"BA_HMQbPHWQJ"},"source":["## Importing the Necessary Libraries"]},{"cell_type":"code","metadata":{"id":"moay-lWZm7z1","executionInfo":{"status":"ok","timestamp":1622153378777,"user_tz":-180,"elapsed":358,"user":{"displayName":"Kuria K. Ken","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhnEdqxk2Mp_jIE4QawUovTRuGsreOMU5LcwWtLIw=s64","userId":"18249265223060828810"}}},"source":["# We will start by running this cell which will import the necessary libraries\n","# ---\n","# \n","import pandas as pd                # Pandas for data manipulation\n","import numpy as np                 # Numpy for scientific computations\n","import matplotlib.pyplot as plt    # Matplotlib for visualisation - We might not use it but just incase you decide to \n","%matplotlib inline                "],"execution_count":2,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"SPpfqZYzrKvs"},"source":["## Example "]},{"cell_type":"code","metadata":{"id":"z6pUHkWwrI8l"},"source":["# Example \n","# ---\n","# Question: Will John, 40 years old with a salary of 2500 buy a car?\n","# ---\n","# Dataset url = http://bit.ly/SocialNetworkAdsDataset\n","# ---"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"eagUqvVmeRTx"},"source":["#### Data Importation and Exploration"]},{"cell_type":"code","metadata":{"id":"N1pbsTYuPOLe","colab":{"base_uri":"https://localhost:8080/","height":204},"executionInfo":{"status":"ok","timestamp":1622153387844,"user_tz":-180,"elapsed":1003,"user":{"displayName":"Kuria K. Ken","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhnEdqxk2Mp_jIE4QawUovTRuGsreOMU5LcwWtLIw=s64","userId":"18249265223060828810"}},"outputId":"51401a4f-4f04-4b7b-d15d-62b34e53b511"},"source":["# Loading and previewing our dataset\n","# ---\n","# \n","social_df = pd.read_csv('http://bit.ly/SocialNetworkAdsDataset')\n","social_df.head()"],"execution_count":3,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>User ID</th>\n","      <th>Gender</th>\n","      <th>Age</th>\n","      <th>EstimatedSalary</th>\n","      <th>Purchased</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>15624510</td>\n","      <td>Male</td>\n","      <td>19</td>\n","      <td>19000</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>15810944</td>\n","      <td>Male</td>\n","      <td>35</td>\n","      <td>20000</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>15668575</td>\n","      <td>Female</td>\n","      <td>26</td>\n","      <td>43000</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>15603246</td>\n","      <td>Female</td>\n","      <td>27</td>\n","      <td>57000</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>15804002</td>\n","      <td>Male</td>\n","      <td>19</td>\n","      <td>76000</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["    User ID  Gender  Age  EstimatedSalary  Purchased\n","0  15624510    Male   19            19000          0\n","1  15810944    Male   35            20000          0\n","2  15668575  Female   26            43000          0\n","3  15603246  Female   27            57000          0\n","4  15804002    Male   19            76000          0"]},"metadata":{"tags":[]},"execution_count":3}]},{"cell_type":"code","metadata":{"id":"gPZkxTRrdQaC","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1622153394199,"user_tz":-180,"elapsed":373,"user":{"displayName":"Kuria K. Ken","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhnEdqxk2Mp_jIE4QawUovTRuGsreOMU5LcwWtLIw=s64","userId":"18249265223060828810"}},"outputId":"ca4e597c-509e-4e23-dae1-c53bc6f04eb8"},"source":["# Determining the size of our dataset\n","# (records, columns)\n","# ---\n","# \n","social_df.shape"],"execution_count":4,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(400, 5)"]},"metadata":{"tags":[]},"execution_count":4}]},{"cell_type":"markdown","metadata":{"id":"Pz6qTiItChtg"},"source":["#### Data Preparation"]},{"cell_type":"code","metadata":{"id":"XtaBMmZBCkW1","colab":{"base_uri":"https://localhost:8080/","height":204},"executionInfo":{"status":"ok","timestamp":1622153399397,"user_tz":-180,"elapsed":378,"user":{"displayName":"Kuria K. Ken","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhnEdqxk2Mp_jIE4QawUovTRuGsreOMU5LcwWtLIw=s64","userId":"18249265223060828810"}},"outputId":"52dd1023-45d2-491d-ec5b-cfe144a3433a"},"source":["# Normally during this stage we would perform quite a number of \n","# procedures, but because our focus is only on learning about the \n","# different modeling algorithms, we will only perform once \n","# essential step in ot dataset. We will perform encoding,\n","# which will help us transform our categorical values in our \n","# dataset into numerical values. \n","# Lets see what happens when we encode the gender variable \n","# to have only numerical values. \n","# ---\n","#\n","social_df[\"Gender\"] = np.where(social_df[\"Gender\"].str.contains(\"Male\", \"Female\"), 1, 0)\n","social_df.head()"],"execution_count":5,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>User ID</th>\n","      <th>Gender</th>\n","      <th>Age</th>\n","      <th>EstimatedSalary</th>\n","      <th>Purchased</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>15624510</td>\n","      <td>1</td>\n","      <td>19</td>\n","      <td>19000</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>15810944</td>\n","      <td>1</td>\n","      <td>35</td>\n","      <td>20000</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>15668575</td>\n","      <td>0</td>\n","      <td>26</td>\n","      <td>43000</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>15603246</td>\n","      <td>0</td>\n","      <td>27</td>\n","      <td>57000</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>15804002</td>\n","      <td>1</td>\n","      <td>19</td>\n","      <td>76000</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["    User ID  Gender  Age  EstimatedSalary  Purchased\n","0  15624510       1   19            19000          0\n","1  15810944       1   35            20000          0\n","2  15668575       0   26            43000          0\n","3  15603246       0   27            57000          0\n","4  15804002       1   19            76000          0"]},"metadata":{"tags":[]},"execution_count":5}]},{"cell_type":"markdown","metadata":{"id":"G8NJS6N6eU7j"},"source":["#### Data Modeling"]},{"cell_type":"code","metadata":{"id":"ybg1VYOGSXbr","executionInfo":{"status":"ok","timestamp":1622153745043,"user_tz":-180,"elapsed":348,"user":{"displayName":"Kuria K. Ken","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhnEdqxk2Mp_jIE4QawUovTRuGsreOMU5LcwWtLIw=s64","userId":"18249265223060828810"}}},"source":["# Preparing our dataset for training\n","# ---\n","# We first divide our data into attributes and labels:\n","# You can think of this as splitting our dataset into independent and independent variables \n","# where Age and EstimatedSalary are the independent variables and Purchased are the dependent/label variable.\n","# ---\n","# \n","X = social_df.iloc[:, [1, 2 ,3]].values  # Independent/predictor variables\n","y = social_df.iloc[:, 4].values          # Dependent/label variable"],"execution_count":8,"outputs":[]},{"cell_type":"code","metadata":{"id":"kFyZcCeVScEp","executionInfo":{"status":"ok","timestamp":1622153906419,"user_tz":-180,"elapsed":1421,"user":{"displayName":"Kuria K. Ken","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhnEdqxk2Mp_jIE4QawUovTRuGsreOMU5LcwWtLIw=s64","userId":"18249265223060828810"}}},"source":["# Splitting the dataset into a training set and test set\n","# ---\n","# We will split our dataset into training data and test data. \n","# Training data will be used to train our logistic model and test data will be used to validate our model\n","# Because weâ€™ll use sklearn to split our data, we will import train_test_split from sklearn.model_selection\n","# ---\n","# \n","from sklearn.model_selection import train_test_split\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0)"],"execution_count":9,"outputs":[]},{"cell_type":"code","metadata":{"id":"Sgn73UwVS9hf","executionInfo":{"status":"ok","timestamp":1622153916763,"user_tz":-180,"elapsed":535,"user":{"displayName":"Kuria K. Ken","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhnEdqxk2Mp_jIE4QawUovTRuGsreOMU5LcwWtLIw=s64","userId":"18249265223060828810"}}},"source":["# Feature Scaling / Normalisation\n","# ---\n","# We then perform feature scaling / normalisation to scale our data between 0 and 1 so as to get better accuracy.\n","# Here, scaling is important because there is a huge difference between Age and EstimatedSalary.\n","# In addition, this would also reduce redundacy in our dataset. \n","# ---\n","#  \n","\n","# We perform normalisation\n","from sklearn.preprocessing import MinMaxScaler  \n","norm = MinMaxScaler().fit(X_train) \n","X_train = norm.transform(X_train) \n","X_test = norm.transform(X_test)"],"execution_count":11,"outputs":[]},{"cell_type":"code","metadata":{"id":"3cDNlsiGTaRF","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1622153920112,"user_tz":-180,"elapsed":597,"user":{"displayName":"Kuria K. Ken","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhnEdqxk2Mp_jIE4QawUovTRuGsreOMU5LcwWtLIw=s64","userId":"18249265223060828810"}},"outputId":"0527dc27-b35c-4072-b153-bce6d1771d41"},"source":["# In this example, because we will be comparing how \n","# the different classification algorithms will perform, \n","# we import our classifiers as shown below.\n","# ---\n","#\n","from sklearn.linear_model import LogisticRegression # Logistic Regression Classifier\n","from sklearn.tree import DecisionTreeClassifier     # Decision Tree Classifier\n","from sklearn.svm import SVC                         # SVM Classifier\n","from sklearn.naive_bayes import GaussianNB          # Naive Bayes Classifier\n","from sklearn.neighbors import KNeighborsClassifier  # KNN Classifier\n","\n","# Below, we make an instance classifier of the object LogisticRegression, \n","# DecisionTreeClassifier, SVC, GaussianNB, KNeighborsClassifier, GaussianNB.\n","# As we will get to see, each of the classifiers take different parameters.\n","# ---\n","# \n","logistic_classifier = LogisticRegression()\n","decision_classifier = DecisionTreeClassifier()\n","svm_classifier = SVC()\n","knn_classifier = KNeighborsClassifier()\n","naive_classifier = GaussianNB()\n","\n","# Now using these classifiers to fit our data, X_train and y_train.\n","# By fitting we mean we train our classifiers based on the train dataset.\n","# ---\n","# Upon running this cell, we should have classifiers that can predict \n","# whether a person will buy a car or not.\n","# ---\n","# Don't worry about the output, we get GaussianNB because our Naive Bayes classifier\n","# is the last one to be built.\n","# ---\n","#\n","logistic_classifier.fit(X_train, y_train)\n","decision_classifier.fit(X_train, y_train)\n","svm_classifier.fit(X_train, y_train)\n","knn_classifier.fit(X_train, y_train)\n","naive_classifier.fit(X_train, y_train)"],"execution_count":12,"outputs":[{"output_type":"execute_result","data":{"text/plain":["GaussianNB(priors=None, var_smoothing=1e-09)"]},"metadata":{"tags":[]},"execution_count":12}]},{"cell_type":"code","metadata":{"id":"KAx-7zU7Tyrt","executionInfo":{"status":"ok","timestamp":1622154111649,"user_tz":-180,"elapsed":52,"user":{"displayName":"Kuria K. Ken","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhnEdqxk2Mp_jIE4QawUovTRuGsreOMU5LcwWtLIw=s64","userId":"18249265223060828810"}}},"source":["# We now predict the test set results. \n","# This will help us determine whether our classifiers made the correct predictions.\n","# ---\n","# No expected output here.\n","# ---\n","logistic_y_prediction = logistic_classifier.predict(X_test) \n","decision_y_prediction = decision_classifier.predict(X_test) \n","svm_y_prediction = svm_classifier.predict(X_test) \n","knn_y_prediction = knn_classifier.predict(X_test) \n","naive_y_prediction = naive_classifier.predict(X_test) "],"execution_count":15,"outputs":[]},{"cell_type":"code","metadata":{"id":"rG_q-tVaUFxy","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1622154109202,"user_tz":-180,"elapsed":370,"user":{"displayName":"Kuria K. Ken","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhnEdqxk2Mp_jIE4QawUovTRuGsreOMU5LcwWtLIw=s64","userId":"18249265223060828810"}},"outputId":"d104542b-000b-4414-ea0e-bcff204c8185"},"source":["# We then import evaluation metrics to determine the accuracy of classifiers\n","# ---\n","# \n","from sklearn.metrics import classification_report, accuracy_score \n","\n","# The accuracy score - is the simplest way to evaluate \n","# However, we note not for a highly imbalance dataset. \n","# By imbalanced we mean that our original dataset would\n","# need to have an equal no's of 1 and 0's\n","# ---#\n","from sklearn.metrics import classification_report, accuracy_score \n","print(accuracy_score(logistic_y_prediction, y_test))\n","print(accuracy_score(decision_y_prediction, y_test))\n","print(accuracy_score(svm_y_prediction, y_test))\n","print(accuracy_score(knn_y_prediction, y_test))\n","print(accuracy_score(naive_y_prediction, y_test))\n","\n","# From the accuracy scores we get 90%, 90%, 93%, 93% & 91% respectively.\n","# The most accurate classifier being SVM & KNN. "],"execution_count":14,"outputs":[{"output_type":"stream","text":["0.89\n","0.92\n","0.92\n","0.93\n","0.91\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"k4wgNdhhrdVK","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1622154137278,"user_tz":-180,"elapsed":336,"user":{"displayName":"Kuria K. Ken","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhnEdqxk2Mp_jIE4QawUovTRuGsreOMU5LcwWtLIw=s64","userId":"18249265223060828810"}},"outputId":"a0a3b67a-4079-48fc-c689-d4d2b0c3b4ae"},"source":["# We now print the classification report, \n","# which is more reliable for a highly imbalanced dataset. \n","# We use the precision values which give us accuracy values.\n","# \n","# ---\n","# The precision will be \"how many are correctly classified among that class\".\n","# The recall means \"how many of this class you find over the whole number of element of this class\".\n","# The f1-score is the harmonic mean between precision & recall.\n","# The support is the number of occurence of the given class in your dataset.\n","# ---\n","# \n","print('Logistic classifier:')\n","print(classification_report(y_test, logistic_y_prediction))\n","\n","print('Decision Tree classifier:')\n","print(classification_report(y_test, decision_y_prediction))\n","\n","print('SVM Classifier:')\n","print(classification_report(y_test, svm_y_prediction))\n","\n","print('KNN Classifier:')\n","print(classification_report(y_test, knn_y_prediction))\n","\n","print('Naive Bayes Classifier:')\n","print(classification_report(y_test, naive_y_prediction)) \n","\n","# From our classification report,\n","# Our support tells us that our dataset is highly imbalanced i.e. 63 0's and 32 1's.\n","# From the weighted avg which takes into account of our imbalanced\n","# dataset we get 90%, 90%, 93%, 93%, 91%.\n","# Still, the most accurate classifiers being SVM and KNN. \n","# We can then further perform model opmization techiniques i.e. \n","# data cleaning, feature engineering, checking for model assumptions, etc. \n","# to further get the best classifier. "],"execution_count":17,"outputs":[{"output_type":"stream","text":["Logistic classifier:\n","              precision    recall  f1-score   support\n","\n","           0       0.87      0.99      0.92        68\n","           1       0.96      0.69      0.80        32\n","\n","    accuracy                           0.89       100\n","   macro avg       0.91      0.84      0.86       100\n","weighted avg       0.90      0.89      0.88       100\n","\n","Decision Tree classifier:\n","              precision    recall  f1-score   support\n","\n","           0       0.95      0.93      0.94        68\n","           1       0.85      0.91      0.88        32\n","\n","    accuracy                           0.92       100\n","   macro avg       0.90      0.92      0.91       100\n","weighted avg       0.92      0.92      0.92       100\n","\n","SVM Classifier:\n","              precision    recall  f1-score   support\n","\n","           0       0.94      0.94      0.94        68\n","           1       0.88      0.88      0.88        32\n","\n","    accuracy                           0.92       100\n","   macro avg       0.91      0.91      0.91       100\n","weighted avg       0.92      0.92      0.92       100\n","\n","KNN Classifier:\n","              precision    recall  f1-score   support\n","\n","           0       0.96      0.94      0.95        68\n","           1       0.88      0.91      0.89        32\n","\n","    accuracy                           0.93       100\n","   macro avg       0.92      0.92      0.92       100\n","weighted avg       0.93      0.93      0.93       100\n","\n","Naive Bayes Classifier:\n","              precision    recall  f1-score   support\n","\n","           0       0.90      0.97      0.94        68\n","           1       0.93      0.78      0.85        32\n","\n","    accuracy                           0.91       100\n","   macro avg       0.92      0.88      0.89       100\n","weighted avg       0.91      0.91      0.91       100\n","\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"g_a-Rfv_ZfYQ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1622154375880,"user_tz":-180,"elapsed":333,"user":{"displayName":"Kuria K. Ken","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhnEdqxk2Mp_jIE4QawUovTRuGsreOMU5LcwWtLIw=s64","userId":"18249265223060828810"}},"outputId":"f5493bd2-11be-4fd2-8e3d-d0cab0df1c4d"},"source":["# We can also use a confusion matrix to determine the accuracy of our model\n","# This will give more details about the model performance.\n","# ---\n","# A confusion matrix is a summary of prediction results on a classification problem. \n","# The number of correct and incorrect predictions are summarized with count values and broken down by each class.\n","# The confusion matrix shows the ways in which your classification model is confused when it makes predictions. \n","# It gives us insight not only into the errors being made by a classifier but more importantly the types of errors \n","# that are being made. The number of correct predictions for each class run on the diagonal \n","# from top-left to bottom-right.\n","# ---\n","# In the confusion matrix below we get:\n","# [[66  7]\n","# [2 25]]\n","# This can be interpreted by:\n","# ---\n","# [[TP, TN]\n","# [FP, FN]]\n","# ---\n","# True Positive (TP) : Observation is positive, and is predicted to be positive.\n","# False Negative (FN) : Observation is positive, but is predicted negative.\n","# True Negative (TN) : Observation is negative, and is predicted to be negative.\n","# False Positive (FP) : Observation is negative, but is predicted positive.\n","# ---\n","# \n","from sklearn.metrics import confusion_matrix \n"," \n","print('Logistic Regression classifier:')\n","print(confusion_matrix(logistic_y_prediction, y_test))\n","\n","print('Decision Tree classifier:')\n","print(confusion_matrix(decision_y_prediction, y_test))\n","\n","print('KNN Classifier:')\n","print(confusion_matrix(knn_y_prediction, y_test))\n","\n","print('SVM classifier:')\n","print(confusion_matrix(svm_y_prediction, y_test))\n","\n","print('Naive Bayes classifier:')\n","print(confusion_matrix(naive_y_prediction, y_test))"],"execution_count":18,"outputs":[{"output_type":"stream","text":["Logistic Regression classifier:\n","[[67 10]\n"," [ 1 22]]\n","Decision Tree classifier:\n","[[63  3]\n"," [ 5 29]]\n","KNN Classifier:\n","[[64  3]\n"," [ 4 29]]\n","SVM classifier:\n","[[64  4]\n"," [ 4 28]]\n","Naive Bayes classifier:\n","[[66  7]\n"," [ 2 25]]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"nnqqUOET9QLu","colab":{"base_uri":"https://localhost:8080/","height":351},"executionInfo":{"status":"error","timestamp":1622158132694,"user_tz":-180,"elapsed":370,"user":{"displayName":"Kuria K. Ken","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhnEdqxk2Mp_jIE4QawUovTRuGsreOMU5LcwWtLIw=s64","userId":"18249265223060828810"}},"outputId":"0137661d-015c-4c16-a644-4d1e0e5b2d65"},"source":["# Answering our question\n","# ---\n","# We then make a new prediction & compare results.\n","# Note that we would only use the best optimized classifier for this case.\n","# ---\n","# Predict whether John, 60 years old with a salary of 2500 will buy a car or not?\n","# ---\n","# Dataset limitation: This is not a practical dataset, thus dataset will lack essential features/variables.\n","# In a real case scenario, we would work with may kinds of features that require transformation\n","# i.e. data cleaning, feature engineering, etc.\n","# ---\n","# 1: Represents Male\n","# 60: Represents age\n","# 2500: Represents Salary\n","# ---\n","# \n","new_case = [[1,\t60, 250000]]\n","\n","# We will need to transform our new case\n","new_case = norm.transform(new_case)  \n","\n","print('Logistic Regression classifier', logistic_classifier.predict(new_case))\n","print('Decision Tree classifier:', decision_classifier.predict(new_case))\n","print('SVM classifier:', svm_classifier.predict(new_case))\n","print('KNN classifier:', knn_classifier.predict(new_case)) \n","print('Naive Bayes classifier:', naive_classifier.predict(new_case))"],"execution_count":56,"outputs":[{"output_type":"error","ename":"ValueError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-56-c0938fec4a13>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     18\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     19\u001b[0m \u001b[0;31m# We will need to transform our new case\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 20\u001b[0;31m \u001b[0mnew_case\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnorm\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtransform\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnew_case\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     21\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     22\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Logistic Regression classifier'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlogistic_classifier\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnew_case\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/sklearn/preprocessing/_data.py\u001b[0m in \u001b[0;36mtransform\u001b[0;34m(self, X)\u001b[0m\n\u001b[1;32m    412\u001b[0m                         force_all_finite=\"allow-nan\")\n\u001b[1;32m    413\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 414\u001b[0;31m         \u001b[0mX\u001b[0m \u001b[0;34m*=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mscale_\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    415\u001b[0m         \u001b[0mX\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmin_\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    416\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: operands could not be broadcast together with shapes (1,3) (2,) (1,3) "]}]},{"cell_type":"markdown","metadata":{"id":"wBSYp3fVIupH"},"source":["##<font color=\"green\">Challenges</font>"]},{"cell_type":"markdown","metadata":{"id":"uebT2koxr4V4"},"source":["###<font color=\"green\">Challenge 1</font>"]},{"cell_type":"code","metadata":{"id":"TVcDuh88sFLE","colab":{"base_uri":"https://localhost:8080/","height":419},"executionInfo":{"status":"ok","timestamp":1622156841972,"user_tz":-180,"elapsed":1304,"user":{"displayName":"Kuria K. Ken","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhnEdqxk2Mp_jIE4QawUovTRuGsreOMU5LcwWtLIw=s64","userId":"18249265223060828810"}},"outputId":"a5a7e498-b0e2-46e1-9b12-a844eade4685"},"source":["# Challenge 1\n","# ---\n","# Question: As a Reseacher at KEMRI you are performing research on diabetes.\n","# Create the a classifier to determine whether a person has diabetes or not\n","# from the given the following sample dataset.\n","# ---\n","# Dataset url = http://bit.ly/ADiabetesDataset\n","# ---\n","# OUR CODE GOES BELOW\n","#\n","\n","kemri = pd.read_csv('http://bit.ly/ADiabetesDataset')\n","\n","kemri"],"execution_count":31,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Pregnancies</th>\n","      <th>Glucose</th>\n","      <th>BloodPressure</th>\n","      <th>SkinThickness</th>\n","      <th>Insulin</th>\n","      <th>BMI</th>\n","      <th>DiabetesPedigreeFunction</th>\n","      <th>Age</th>\n","      <th>Outcome</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>6</td>\n","      <td>148</td>\n","      <td>72</td>\n","      <td>35</td>\n","      <td>0</td>\n","      <td>33.6</td>\n","      <td>0.627</td>\n","      <td>50</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>85</td>\n","      <td>66</td>\n","      <td>29</td>\n","      <td>0</td>\n","      <td>26.6</td>\n","      <td>0.351</td>\n","      <td>31</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>8</td>\n","      <td>183</td>\n","      <td>64</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>23.3</td>\n","      <td>0.672</td>\n","      <td>32</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1</td>\n","      <td>89</td>\n","      <td>66</td>\n","      <td>23</td>\n","      <td>94</td>\n","      <td>28.1</td>\n","      <td>0.167</td>\n","      <td>21</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0</td>\n","      <td>137</td>\n","      <td>40</td>\n","      <td>35</td>\n","      <td>168</td>\n","      <td>43.1</td>\n","      <td>2.288</td>\n","      <td>33</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>763</th>\n","      <td>10</td>\n","      <td>101</td>\n","      <td>76</td>\n","      <td>48</td>\n","      <td>180</td>\n","      <td>32.9</td>\n","      <td>0.171</td>\n","      <td>63</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>764</th>\n","      <td>2</td>\n","      <td>122</td>\n","      <td>70</td>\n","      <td>27</td>\n","      <td>0</td>\n","      <td>36.8</td>\n","      <td>0.340</td>\n","      <td>27</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>765</th>\n","      <td>5</td>\n","      <td>121</td>\n","      <td>72</td>\n","      <td>23</td>\n","      <td>112</td>\n","      <td>26.2</td>\n","      <td>0.245</td>\n","      <td>30</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>766</th>\n","      <td>1</td>\n","      <td>126</td>\n","      <td>60</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>30.1</td>\n","      <td>0.349</td>\n","      <td>47</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>767</th>\n","      <td>1</td>\n","      <td>93</td>\n","      <td>70</td>\n","      <td>31</td>\n","      <td>0</td>\n","      <td>30.4</td>\n","      <td>0.315</td>\n","      <td>23</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>768 rows Ã— 9 columns</p>\n","</div>"],"text/plain":["     Pregnancies  Glucose  ...  Age  Outcome\n","0              6      148  ...   50        1\n","1              1       85  ...   31        0\n","2              8      183  ...   32        1\n","3              1       89  ...   21        0\n","4              0      137  ...   33        1\n","..           ...      ...  ...  ...      ...\n","763           10      101  ...   63        0\n","764            2      122  ...   27        0\n","765            5      121  ...   30        0\n","766            1      126  ...   47        1\n","767            1       93  ...   23        0\n","\n","[768 rows x 9 columns]"]},"metadata":{"tags":[]},"execution_count":31}]},{"cell_type":"code","metadata":{"id":"TVlT6RXKC4GG","executionInfo":{"status":"ok","timestamp":1622157923234,"user_tz":-180,"elapsed":342,"user":{"displayName":"Kuria K. Ken","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhnEdqxk2Mp_jIE4QawUovTRuGsreOMU5LcwWtLIw=s64","userId":"18249265223060828810"}}},"source":["\n","X = kemri.iloc[:, [3, 8]].values  # Independent/predictor variables\n","y = kemri.iloc[:, 7].values"],"execution_count":44,"outputs":[]},{"cell_type":"code","metadata":{"id":"ywD0J_g7HsV4","executionInfo":{"status":"ok","timestamp":1622157926900,"user_tz":-180,"elapsed":22,"user":{"displayName":"Kuria K. Ken","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhnEdqxk2Mp_jIE4QawUovTRuGsreOMU5LcwWtLIw=s64","userId":"18249265223060828810"}}},"source":["from sklearn.model_selection import train_test_split\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0)\n","\n","from sklearn.preprocessing import MinMaxScaler  \n","norm = MinMaxScaler().fit(X_train) \n","X_train = norm.transform(X_train) \n","X_test = norm.transform(X_test)"],"execution_count":45,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ina5CSLyH8wX","executionInfo":{"status":"ok","timestamp":1622157929330,"user_tz":-180,"elapsed":18,"user":{"displayName":"Kuria K. Ken","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhnEdqxk2Mp_jIE4QawUovTRuGsreOMU5LcwWtLIw=s64","userId":"18249265223060828810"}},"outputId":"b64aa7ab-feb8-4529-c2d3-bc6dd9f43f34"},"source":["\n","from sklearn.linear_model import LogisticRegression # Logistic Regression Classifier\n","from sklearn.tree import DecisionTreeClassifier     # Decision Tree Classifier\n","from sklearn.svm import SVC                         # SVM Classifier\n","from sklearn.naive_bayes import GaussianNB          # Naive Bayes Classifier\n","from sklearn.neighbors import KNeighborsClassifier  # KNN Classifier\n","\n","logistic_classifier = LogisticRegression()\n","decision_classifier = DecisionTreeClassifier()\n","svm_classifier = SVC()\n","knn_classifier = KNeighborsClassifier()\n","naive_classifier = GaussianNB()\n","\n","\n","logistic_classifier.fit(X_train, y_train)\n","decision_classifier.fit(X_train, y_train)\n","svm_classifier.fit(X_train, y_train)\n","knn_classifier.fit(X_train, y_train)\n","naive_classifier.fit(X_train, y_train)"],"execution_count":46,"outputs":[{"output_type":"execute_result","data":{"text/plain":["GaussianNB(priors=None, var_smoothing=1e-09)"]},"metadata":{"tags":[]},"execution_count":46}]},{"cell_type":"code","metadata":{"id":"nRg4RBeLIHf7","executionInfo":{"status":"ok","timestamp":1622157931988,"user_tz":-180,"elapsed":410,"user":{"displayName":"Kuria K. Ken","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhnEdqxk2Mp_jIE4QawUovTRuGsreOMU5LcwWtLIw=s64","userId":"18249265223060828810"}}},"source":["\n","# ---\n","logistic_y_prediction = logistic_classifier.predict(X_test) \n","decision_y_prediction = decision_classifier.predict(X_test) \n","svm_y_prediction = svm_classifier.predict(X_test) \n","knn_y_prediction = knn_classifier.predict(X_test) \n","naive_y_prediction = naive_classifier.predict(X_test) "],"execution_count":47,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"bs4dwcxLINKG","executionInfo":{"status":"ok","timestamp":1622157933709,"user_tz":-180,"elapsed":26,"user":{"displayName":"Kuria K. Ken","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhnEdqxk2Mp_jIE4QawUovTRuGsreOMU5LcwWtLIw=s64","userId":"18249265223060828810"}},"outputId":"d64fa1c6-ae52-494f-a8ef-6dc67e54a572"},"source":["\n","from sklearn.metrics import classification_report, accuracy_score \n","print(accuracy_score(logistic_y_prediction, y_test))\n","print(accuracy_score(decision_y_prediction, y_test))\n","print(accuracy_score(svm_y_prediction, y_test))\n","print(accuracy_score(knn_y_prediction, y_test))\n","print(accuracy_score(naive_y_prediction, y_test))"],"execution_count":48,"outputs":[{"output_type":"stream","text":["0.09375\n","0.08854166666666667\n","0.08854166666666667\n","0.078125\n","0.0\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"83ltwK66IT9e","executionInfo":{"status":"ok","timestamp":1622158163830,"user_tz":-180,"elapsed":601,"user":{"displayName":"Kuria K. Ken","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhnEdqxk2Mp_jIE4QawUovTRuGsreOMU5LcwWtLIw=s64","userId":"18249265223060828810"}},"outputId":"9bab8988-6433-454a-bfb3-cadcbb20b13d"},"source":["#from sklearn.metrics import confusion_matrix \n","\n","\n","print('Logistic classifier:')\n","print(classification_report(y_test, logistic_y_prediction))\n","\n","print('Decision Tree classifier:')\n","print(classification_report(y_test, decision_y_prediction))\n","\n","print('SVM Classifier:')\n","print(classification_report(y_test, svm_y_prediction))\n","\n","print('KNN Classifier:')\n","print(classification_report(y_test, knn_y_prediction))\n","\n","print('Naive Bayes Classifier:')\n","print(classification_report(y_test, naive_y_prediction)) "],"execution_count":59,"outputs":[{"output_type":"stream","text":["Logistic classifier:\n","              precision    recall  f1-score   support\n","\n","          21       0.00      0.00      0.00        20\n","          22       0.11      0.74      0.19        19\n","          23       0.00      0.00      0.00         7\n","          24       0.00      0.00      0.00        12\n","          25       0.11      0.19      0.14        16\n","          26       0.00      0.00      0.00         5\n","          27       0.00      0.00      0.00        10\n","          28       0.00      0.00      0.00         9\n","          29       0.00      0.00      0.00         5\n","          30       0.00      0.00      0.00        10\n","          31       0.03      0.25      0.05         4\n","          32       0.00      0.00      0.00         4\n","          33       0.00      0.00      0.00         4\n","          34       0.00      0.00      0.00         1\n","          35       0.00      0.00      0.00         2\n","          36       0.00      0.00      0.00         5\n","          37       0.00      0.00      0.00         5\n","          38       0.00      0.00      0.00         4\n","          39       0.00      0.00      0.00         5\n","          40       0.00      0.00      0.00         2\n","          41       0.00      0.00      0.00         6\n","          42       0.00      0.00      0.00         6\n","          43       0.00      0.00      0.00         1\n","          44       0.00      0.00      0.00         1\n","          45       0.00      0.00      0.00         1\n","          46       0.00      0.00      0.00         4\n","          47       0.00      0.00      0.00         3\n","          48       0.00      0.00      0.00         1\n","          49       0.00      0.00      0.00         1\n","          50       0.00      0.00      0.00         1\n","          51       0.00      0.00      0.00         3\n","          52       0.00      0.00      0.00         1\n","          53       0.00      0.00      0.00         2\n","          54       0.00      0.00      0.00         1\n","          55       0.00      0.00      0.00         2\n","          56       0.00      0.00      0.00         1\n","          57       0.00      0.00      0.00         2\n","          59       0.00      0.00      0.00         1\n","          62       0.00      0.00      0.00         2\n","          63       0.00      0.00      0.00         2\n","          65       0.00      0.00      0.00         1\n","\n","    accuracy                           0.09       192\n","   macro avg       0.01      0.03      0.01       192\n","weighted avg       0.02      0.09      0.03       192\n","\n","Decision Tree classifier:\n","              precision    recall  f1-score   support\n","\n","          21       0.11      0.45      0.18        20\n","          22       0.08      0.11      0.09        19\n","          23       0.07      0.14      0.09         7\n","          24       0.00      0.00      0.00        12\n","          25       0.25      0.06      0.10        16\n","          26       0.25      0.20      0.22         5\n","          27       0.00      0.00      0.00        10\n","          28       0.20      0.11      0.14         9\n","          29       0.00      0.00      0.00         5\n","          30       0.00      0.00      0.00        10\n","          31       0.03      0.25      0.05         4\n","          32       0.00      0.00      0.00         4\n","          33       0.50      0.25      0.33         4\n","          34       0.00      0.00      0.00         1\n","          35       0.00      0.00      0.00         2\n","          36       0.00      0.00      0.00         5\n","          37       0.00      0.00      0.00         5\n","          38       0.00      0.00      0.00         4\n","          39       0.00      0.00      0.00         5\n","          40       0.00      0.00      0.00         2\n","          41       0.00      0.00      0.00         6\n","          42       0.00      0.00      0.00         6\n","          43       0.00      0.00      0.00         1\n","          44       0.00      0.00      0.00         1\n","          45       0.00      0.00      0.00         1\n","          46       0.00      0.00      0.00         4\n","          47       0.00      0.00      0.00         3\n","          48       0.00      0.00      0.00         1\n","          49       0.00      0.00      0.00         1\n","          50       0.00      0.00      0.00         1\n","          51       0.00      0.00      0.00         3\n","          52       0.00      0.00      0.00         1\n","          53       0.00      0.00      0.00         2\n","          54       0.00      0.00      0.00         1\n","          55       0.00      0.00      0.00         2\n","          56       0.00      0.00      0.00         1\n","          57       0.00      0.00      0.00         2\n","          58       0.00      0.00      0.00         0\n","          59       0.00      0.00      0.00         1\n","          62       0.00      0.00      0.00         2\n","          63       0.00      0.00      0.00         2\n","          65       0.00      0.00      0.00         1\n","\n","    accuracy                           0.09       192\n","   macro avg       0.04      0.04      0.03       192\n","weighted avg       0.07      0.09      0.06       192\n","\n","SVM Classifier:\n","              precision    recall  f1-score   support\n","\n","          21       0.00      0.00      0.00        20\n","          22       0.11      0.74      0.19        19\n","          23       0.00      0.00      0.00         7\n","          24       0.00      0.00      0.00        12\n","          25       0.07      0.06      0.06        16\n","          26       0.00      0.00      0.00         5\n","          27       0.00      0.00      0.00        10\n","          28       0.00      0.00      0.00         9\n","          29       0.00      0.00      0.00         5\n","          30       0.00      0.00      0.00        10\n","          31       0.00      0.00      0.00         4\n","          32       0.00      0.00      0.00         4\n","          33       0.00      0.00      0.00         4\n","          34       0.00      0.00      0.00         1\n","          35       0.00      0.00      0.00         2\n","          36       0.00      0.00      0.00         5\n","          37       0.00      0.00      0.00         5\n","          38       0.00      0.00      0.00         4\n","          39       0.00      0.00      0.00         5\n","          40       0.00      0.00      0.00         2\n","          41       0.06      0.33      0.10         6\n","          42       0.00      0.00      0.00         6\n","          43       0.00      0.00      0.00         1\n","          44       0.00      0.00      0.00         1\n","          45       0.00      0.00      0.00         1\n","          46       0.00      0.00      0.00         4\n","          47       0.00      0.00      0.00         3\n","          48       0.00      0.00      0.00         1\n","          49       0.00      0.00      0.00         1\n","          50       0.00      0.00      0.00         1\n","          51       0.00      0.00      0.00         3\n","          52       0.00      0.00      0.00         1\n","          53       0.00      0.00      0.00         2\n","          54       0.00      0.00      0.00         1\n","          55       0.00      0.00      0.00         2\n","          56       0.00      0.00      0.00         1\n","          57       0.00      0.00      0.00         2\n","          59       0.00      0.00      0.00         1\n","          62       0.00      0.00      0.00         2\n","          63       0.00      0.00      0.00         2\n","          65       0.00      0.00      0.00         1\n","\n","    accuracy                           0.09       192\n","   macro avg       0.01      0.03      0.01       192\n","weighted avg       0.02      0.09      0.03       192\n","\n","KNN Classifier:\n","              precision    recall  f1-score   support\n","\n","          21       0.15      0.35      0.21        20\n","          22       0.13      0.26      0.18        19\n","          23       0.00      0.00      0.00         7\n","          24       0.08      0.08      0.08        12\n","          25       0.20      0.06      0.10        16\n","          26       0.00      0.00      0.00         5\n","          27       0.00      0.00      0.00        10\n","          28       0.00      0.00      0.00         9\n","          29       0.00      0.00      0.00         5\n","          30       0.00      0.00      0.00        10\n","          31       0.03      0.25      0.06         4\n","          32       0.00      0.00      0.00         4\n","          33       0.00      0.00      0.00         4\n","          34       0.00      0.00      0.00         1\n","          35       0.00      0.00      0.00         2\n","          36       0.00      0.00      0.00         5\n","          37       0.00      0.00      0.00         5\n","          38       0.00      0.00      0.00         4\n","          39       0.00      0.00      0.00         5\n","          40       0.00      0.00      0.00         2\n","          41       0.00      0.00      0.00         6\n","          42       0.00      0.00      0.00         6\n","          43       0.00      0.00      0.00         1\n","          44       0.00      0.00      0.00         1\n","          45       0.00      0.00      0.00         1\n","          46       0.00      0.00      0.00         4\n","          47       0.00      0.00      0.00         3\n","          48       0.00      0.00      0.00         1\n","          49       0.00      0.00      0.00         1\n","          50       0.00      0.00      0.00         1\n","          51       0.00      0.00      0.00         3\n","          52       0.00      0.00      0.00         1\n","          53       0.00      0.00      0.00         2\n","          54       0.00      0.00      0.00         1\n","          55       0.00      0.00      0.00         2\n","          56       0.00      0.00      0.00         1\n","          57       0.00      0.00      0.00         2\n","          59       0.00      0.00      0.00         1\n","          62       0.00      0.00      0.00         2\n","          63       0.00      0.00      0.00         2\n","          65       0.00      0.00      0.00         1\n","\n","    accuracy                           0.08       192\n","   macro avg       0.01      0.02      0.01       192\n","weighted avg       0.05      0.08      0.05       192\n","\n","Naive Bayes Classifier:\n","              precision    recall  f1-score   support\n","\n","          21       0.00      0.00      0.00      20.0\n","          22       0.00      0.00      0.00      19.0\n","          23       0.00      0.00      0.00       7.0\n","          24       0.00      0.00      0.00      12.0\n","          25       0.00      0.00      0.00      16.0\n","          26       0.00      0.00      0.00       5.0\n","          27       0.00      0.00      0.00      10.0\n","          28       0.00      0.00      0.00       9.0\n","          29       0.00      0.00      0.00       5.0\n","          30       0.00      0.00      0.00      10.0\n","          31       0.00      0.00      0.00       4.0\n","          32       0.00      0.00      0.00       4.0\n","          33       0.00      0.00      0.00       4.0\n","          34       0.00      0.00      0.00       1.0\n","          35       0.00      0.00      0.00       2.0\n","          36       0.00      0.00      0.00       5.0\n","          37       0.00      0.00      0.00       5.0\n","          38       0.00      0.00      0.00       4.0\n","          39       0.00      0.00      0.00       5.0\n","          40       0.00      0.00      0.00       2.0\n","          41       0.00      0.00      0.00       6.0\n","          42       0.00      0.00      0.00       6.0\n","          43       0.00      0.00      0.00       1.0\n","          44       0.00      0.00      0.00       1.0\n","          45       0.00      0.00      0.00       1.0\n","          46       0.00      0.00      0.00       4.0\n","          47       0.00      0.00      0.00       3.0\n","          48       0.00      0.00      0.00       1.0\n","          49       0.00      0.00      0.00       1.0\n","          50       0.00      0.00      0.00       1.0\n","          51       0.00      0.00      0.00       3.0\n","          52       0.00      0.00      0.00       1.0\n","          53       0.00      0.00      0.00       2.0\n","          54       0.00      0.00      0.00       1.0\n","          55       0.00      0.00      0.00       2.0\n","          56       0.00      0.00      0.00       1.0\n","          57       0.00      0.00      0.00       2.0\n","          59       0.00      0.00      0.00       1.0\n","          62       0.00      0.00      0.00       2.0\n","          63       0.00      0.00      0.00       2.0\n","          65       0.00      0.00      0.00       1.0\n","          66       0.00      0.00      0.00       0.0\n","          81       0.00      0.00      0.00       0.0\n","\n","    accuracy                           0.00     192.0\n","   macro avg       0.00      0.00      0.00     192.0\n","weighted avg       0.00      0.00      0.00     192.0\n","\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/sklearn/metrics/_classification.py:1272: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n","/usr/local/lib/python3.7/dist-packages/sklearn/metrics/_classification.py:1272: UndefinedMetricWarning: Recall and F-score are ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vzoZ8_7PIyPc","executionInfo":{"status":"ok","timestamp":1622158148979,"user_tz":-180,"elapsed":799,"user":{"displayName":"Kuria K. Ken","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhnEdqxk2Mp_jIE4QawUovTRuGsreOMU5LcwWtLIw=s64","userId":"18249265223060828810"}},"outputId":"f9058d58-74e6-4873-dc38-3688f6109533"},"source":["\n","from sklearn.metrics import confusion_matrix \n"," \n","print('Logistic Regression classifier:')\n","print(confusion_matrix(logistic_y_prediction, y_test))\n","\n","print('Decision Tree classifier:')\n","print(confusion_matrix(decision_y_prediction, y_test))\n","\n","print('KNN Classifier:')\n","print(confusion_matrix(knn_y_prediction, y_test))\n","\n","print('SVM classifier:')\n","print(confusion_matrix(svm_y_prediction, y_test))\n","\n","print('Naive Bayes classifier:')\n","print(confusion_matrix(naive_y_prediction, y_test))"],"execution_count":57,"outputs":[{"output_type":"stream","text":["Logistic Regression classifier:\n","[[ 0  0  0 ...  0  0  0]\n"," [19 14  6 ...  2  2  1]\n"," [ 0  0  0 ...  0  0  0]\n"," ...\n"," [ 0  0  0 ...  0  0  0]\n"," [ 0  0  0 ...  0  0  0]\n"," [ 0  0  0 ...  0  0  0]]\n","Decision Tree classifier:\n","[[9 9 2 ... 2 1 0]\n"," [4 2 0 ... 0 0 1]\n"," [0 1 1 ... 0 1 0]\n"," ...\n"," [0 0 0 ... 0 0 0]\n"," [0 0 0 ... 0 0 0]\n"," [0 0 0 ... 0 0 0]]\n","KNN Classifier:\n","[[7 8 1 ... 1 1 0]\n"," [6 5 2 ... 0 1 1]\n"," [0 0 0 ... 0 0 0]\n"," ...\n"," [0 0 0 ... 0 0 0]\n"," [0 0 0 ... 0 0 0]\n"," [0 0 0 ... 0 0 0]]\n","SVM classifier:\n","[[ 0  0  0 ...  0  0  0]\n"," [19 14  6 ...  2  2  1]\n"," [ 0  0  0 ...  0  0  0]\n"," ...\n"," [ 0  0  0 ...  0  0  0]\n"," [ 0  0  0 ...  0  0  0]\n"," [ 0  0  0 ...  0  0  0]]\n","Naive Bayes classifier:\n","[[0 0 0 ... 0 0 0]\n"," [0 0 0 ... 0 0 0]\n"," [0 0 0 ... 0 0 0]\n"," ...\n"," [4 1 1 ... 0 0 0]\n"," [1 3 1 ... 0 0 0]\n"," [0 0 1 ... 0 0 0]]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":351},"id":"0NnLPcaHJf-M","executionInfo":{"status":"error","timestamp":1622158168369,"user_tz":-180,"elapsed":368,"user":{"displayName":"Kuria K. Ken","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhnEdqxk2Mp_jIE4QawUovTRuGsreOMU5LcwWtLIw=s64","userId":"18249265223060828810"}},"outputId":"7384c864-132c-4b3e-a097-b15e9b03f9cd"},"source":["\n","case2 = [[50, 20, 20]]\n","\n","case = norm.transform(case2) \n","\n","print('Logistic Regression classifier', logistic_classifier.predict(case))\n","print('Decision Tree classifier:', decision_classifier.predict(case))\n","print('SVM classifier:', svm_classifier.predict(case))\n","print('KNN classifier:', knn_classifier.predict(case)) \n","print('Naive Bayes classifier:', naive_classifier.predict(case))"],"execution_count":60,"outputs":[{"output_type":"error","ename":"ValueError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-60-bec8a69dc3fd>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0mcase2\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m50\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m20\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m20\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m \u001b[0mcase\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnorm\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtransform\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcase2\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      5\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Logistic Regression classifier'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlogistic_classifier\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcase\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/sklearn/preprocessing/_data.py\u001b[0m in \u001b[0;36mtransform\u001b[0;34m(self, X)\u001b[0m\n\u001b[1;32m    412\u001b[0m                         force_all_finite=\"allow-nan\")\n\u001b[1;32m    413\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 414\u001b[0;31m         \u001b[0mX\u001b[0m \u001b[0;34m*=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mscale_\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    415\u001b[0m         \u001b[0mX\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmin_\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    416\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: operands could not be broadcast together with shapes (1,3) (2,) (1,3) "]}]},{"cell_type":"markdown","metadata":{"id":"B-eE6btO3KKM"},"source":["###<font color=\"green\">Challenge 2</font>"]},{"cell_type":"code","metadata":{"id":"YOZ25wbCHQPt"},"source":["# Challenge 3\n","# ---\n","# Question: Build a classifier to predict car sales and check the accuracy of the prediction.\n","# given the following dataset\n","# ---\n","# Dataset url = https://bit.ly/3dvU2BB\n","# ---\n","# OUR CODE GOES BELOW\n","#"],"execution_count":null,"outputs":[]}]}