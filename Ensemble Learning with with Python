{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Copy of AfterWork Data Science: Ensemble Learning with with Python","provenance":[{"file_id":"1ps86Pp4bfXxpqRarNI0R7gxJx3_RvoYf","timestamp":1622750418934}],"collapsed_sections":["BA_HMQbPHWQJ","SPpfqZYzrKvs","5YzXyzh8zmiM","dKTC_Q4g52G1","btf3OzyS52G8","vjn6CpvU52G_","eaPL6iDf7JIA","tqWcOlZ97JIB","rZdaSxPNmxW9","PfdApR7Jmzm9","1eBPjiM8m14s","uebT2koxr4V4"]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"IR_TNDR4xihI"},"source":["<font color=\"blue\">To use this notebook on Google Colaboratory, you will need to make a copy of it. Go to **File** > **Save a Copy in Drive**. You can then use the new copy that will appear in the new tab.</font>"]},{"cell_type":"markdown","metadata":{"id":"GcVE8EgKxl2r"},"source":["# AfterWork Data Science: Ensemble Learning with with Python"]},{"cell_type":"markdown","metadata":{"id":"BA_HMQbPHWQJ"},"source":["## Importing the Necessary Libraries"]},{"cell_type":"code","metadata":{"id":"moay-lWZm7z1","executionInfo":{"status":"ok","timestamp":1622750837435,"user_tz":-180,"elapsed":506,"user":{"displayName":"Kuria K. Ken","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhnEdqxk2Mp_jIE4QawUovTRuGsreOMU5LcwWtLIw=s64","userId":"18249265223060828810"}}},"source":["# We will start by importing the necessary libraries\n","# ---\n","# \n","import pandas as pd                # Pandas for data manipulation\n","import numpy as np                 # Numpy for scientific computations"],"execution_count":3,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"SPpfqZYzrKvs"},"source":["## Examples"]},{"cell_type":"markdown","metadata":{"id":"5YzXyzh8zmiM"},"source":["### <font color=\"blue\">Classification</font>"]},{"cell_type":"code","metadata":{"id":"qyugRGHN52Gv"},"source":["# Example \n","# ---\n","# Question: Will John, 40 years old with a salary of 2500 will buy a car?\n","# ---\n","# Dataset url = http://bit.ly/SocialNetworkAdsDataset\n","# ---"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"dKTC_Q4g52G1"},"source":["##### Data Importation and Exploration"]},{"cell_type":"code","metadata":{"id":"G0nv0nTv52G2","colab":{"base_uri":"https://localhost:8080/","height":359},"executionInfo":{"status":"ok","timestamp":1622747855751,"user_tz":-180,"elapsed":529,"user":{"displayName":"Kuria K. Ken","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhnEdqxk2Mp_jIE4QawUovTRuGsreOMU5LcwWtLIw=s64","userId":"18249265223060828810"}},"outputId":"40b2f458-06db-466e-bada-477ce7e0ddfb"},"source":["# Loading and previewing our dataset\n","# ---\n","# \n","social_df = pd.read_csv('http://bit.ly/SocialNetworkAdsDataset')\n","social_df.sample(10)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>User ID</th>\n","      <th>Gender</th>\n","      <th>Age</th>\n","      <th>EstimatedSalary</th>\n","      <th>Purchased</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>230</th>\n","      <td>15794253</td>\n","      <td>Female</td>\n","      <td>35</td>\n","      <td>147000</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>187</th>\n","      <td>15571059</td>\n","      <td>Female</td>\n","      <td>33</td>\n","      <td>41000</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>254</th>\n","      <td>15724161</td>\n","      <td>Female</td>\n","      <td>50</td>\n","      <td>44000</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>13</th>\n","      <td>15704987</td>\n","      <td>Male</td>\n","      <td>32</td>\n","      <td>18000</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>32</th>\n","      <td>15573452</td>\n","      <td>Female</td>\n","      <td>21</td>\n","      <td>16000</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>94</th>\n","      <td>15786993</td>\n","      <td>Female</td>\n","      <td>29</td>\n","      <td>83000</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>108</th>\n","      <td>15720943</td>\n","      <td>Male</td>\n","      <td>26</td>\n","      <td>86000</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>242</th>\n","      <td>15780572</td>\n","      <td>Female</td>\n","      <td>50</td>\n","      <td>88000</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>36</th>\n","      <td>15690188</td>\n","      <td>Female</td>\n","      <td>33</td>\n","      <td>28000</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>193</th>\n","      <td>15662901</td>\n","      <td>Male</td>\n","      <td>19</td>\n","      <td>70000</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["      User ID  Gender  Age  EstimatedSalary  Purchased\n","230  15794253  Female   35           147000          1\n","187  15571059  Female   33            41000          0\n","254  15724161  Female   50            44000          0\n","13   15704987    Male   32            18000          0\n","32   15573452  Female   21            16000          0\n","94   15786993  Female   29            83000          0\n","108  15720943    Male   26            86000          0\n","242  15780572  Female   50            88000          1\n","36   15690188  Female   33            28000          0\n","193  15662901    Male   19            70000          0"]},"metadata":{"tags":[]},"execution_count":10}]},{"cell_type":"code","metadata":{"id":"5H9l0Kdt52G5","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1622747842710,"user_tz":-180,"elapsed":478,"user":{"displayName":"Kuria K. Ken","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhnEdqxk2Mp_jIE4QawUovTRuGsreOMU5LcwWtLIw=s64","userId":"18249265223060828810"}},"outputId":"7f80ed4f-12ec-4220-b105-0820f3bab974"},"source":["# Determining the size of our dataset\n","# (records, columns)\n","# ---\n","# \n","social_df"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(400, 5)"]},"metadata":{"tags":[]},"execution_count":7}]},{"cell_type":"markdown","metadata":{"id":"btf3OzyS52G8"},"source":["##### Data Preparation"]},{"cell_type":"code","metadata":{"id":"4rwVc4cJ52G8","colab":{"base_uri":"https://localhost:8080/","height":204},"executionInfo":{"status":"ok","timestamp":1622747861128,"user_tz":-180,"elapsed":491,"user":{"displayName":"Kuria K. Ken","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhnEdqxk2Mp_jIE4QawUovTRuGsreOMU5LcwWtLIw=s64","userId":"18249265223060828810"}},"outputId":"73f234c5-4aa4-489b-8fdd-b68d9259eec9"},"source":["# Normally during this stage we would perform quite a number of \n","# procedures, but because our focus is only onlearning about the \n","# different modeling algorithms, we will only perform once \n","# essential step in ot dataset. We will perform encoding,\n","# which will help us transform our categorical values in our \n","# dataset into numerical values. \n","# Lets see what happens when we encode the gender variable \n","# to have only numerical values. \n","# ---\n","#\n","\n"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>User ID</th>\n","      <th>Gender</th>\n","      <th>Age</th>\n","      <th>EstimatedSalary</th>\n","      <th>Purchased</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>15624510</td>\n","      <td>1</td>\n","      <td>19</td>\n","      <td>19000</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>15810944</td>\n","      <td>1</td>\n","      <td>35</td>\n","      <td>20000</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>15668575</td>\n","      <td>0</td>\n","      <td>26</td>\n","      <td>43000</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>15603246</td>\n","      <td>0</td>\n","      <td>27</td>\n","      <td>57000</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>15804002</td>\n","      <td>1</td>\n","      <td>19</td>\n","      <td>76000</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["    User ID  Gender  Age  EstimatedSalary  Purchased\n","0  15624510       1   19            19000          0\n","1  15810944       1   35            20000          0\n","2  15668575       0   26            43000          0\n","3  15603246       0   27            57000          0\n","4  15804002       1   19            76000          0"]},"metadata":{"tags":[]},"execution_count":12}]},{"cell_type":"markdown","metadata":{"id":"vjn6CpvU52G_"},"source":["##### Data Modeling"]},{"cell_type":"code","metadata":{"id":"ybg1VYOGSXbr"},"source":["# Preparing our dataset for training\n","# ---\n","# We first divide our data into attributes and labels:\n","# You can think of this as splitting our data set in dependent and independent variables \n","# where Age and EstimatedSalary are the independent variables and Purchased are the dependent/label variable.\n","# ---\n","# \n","\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"kFyZcCeVScEp"},"source":["# Splitting the dataset into a training set and test set\n","# ---\n","# We will split our dataset into training data and test data. \n","# Training data will be used to train our logistic model and test data will be used to validate our model\n","# Because we’ll use sklearn to split our data, we will import train_test_split from sklearn.model_selection\n","# ---\n","# \n","\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Sgn73UwVS9hf"},"source":["# Feature Scaling / Normalisation\n","# ---\n","# We then perform feature scaling / normalisation to scale our data between 0 and 1 so as to get better accuracy.\n","# Here, scaling is important because there is a huge difference between Age and EstimatedSalary.\n","# In addition, this would also reduce redundacy in our dataset. \n","# ---\n","# \n","\n","# Performing normalisation\n","from sklearn.preprocessing import MinMaxScaler  \n","norm = MinMaxScaler().fit(X_train) \n","X_train = norm.transform(X_train) \n","X_test = norm.transform(X_test)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"3cDNlsiGTaRF","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1622747935572,"user_tz":-180,"elapsed":1044,"user":{"displayName":"Kuria K. Ken","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhnEdqxk2Mp_jIE4QawUovTRuGsreOMU5LcwWtLIw=s64","userId":"18249265223060828810"}},"outputId":"9b1da2ce-672b-4de5-b628-dfe549f95a15"},"source":[""],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["XGBClassifier(base_score=0.5, booster='gbtree', colsample_bylevel=1,\n","              colsample_bynode=1, colsample_bytree=1, gamma=0,\n","              learning_rate=0.1, max_delta_step=0, max_depth=3,\n","              min_child_weight=1, missing=None, n_estimators=100, n_jobs=1,\n","              nthread=None, objective='binary:logistic', random_state=0,\n","              reg_alpha=0, reg_lambda=1, scale_pos_weight=1, seed=None,\n","              silent=None, subsample=1, verbosity=1)"]},"metadata":{"tags":[]},"execution_count":19}]},{"cell_type":"code","metadata":{"id":"KAx-7zU7Tyrt"},"source":["# We now predict the test set results.  \n","# ---\n","# No expected output here.\n","# ---\n","#\n","logistic_y_prediction = logistic_classifier.predict(X_test) \n","decision_y_prediction = decision_classifier.predict(X_test) \n","svm_y_prediction = svm_classifier.predict(X_test) \n","knn_y_prediction = knn_classifier.predict(X_test) \n","naive_y_prediction = naive_classifier.predict(X_test) \n","\n","# Bagging Classifiers\n","# ---\n","bagging_y_classifier = bagging_meta_classifier.predict(X_test) \n","random_forest_y_classifier = random_forest_classifier.predict(X_test) \n","\n","# Boosting Classifiers\n","# ---\n","ada_boost_y_classifier = ada_boost_classifier.predict(X_test)\n","gbm_y_classifier = gbm_classifier.predict(X_test)\n","xg_boost_y_classifier = xg_boost_classifier.predict(X_test)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"rG_q-tVaUFxy","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1622748171081,"user_tz":-180,"elapsed":416,"user":{"displayName":"Kuria K. Ken","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhnEdqxk2Mp_jIE4QawUovTRuGsreOMU5LcwWtLIw=s64","userId":"18249265223060828810"}},"outputId":"15e12337-39ad-40af-e7d6-6d0ed81c5e19"},"source":["# We then import evaluation metrics to determine the accuracy of classifiers\n","# ---\n","# \n","from sklearn.metrics import classification_report, accuracy_score \n","\n","# The accuracy score - is the simplest way to evaluate \n","# However, we note not for a highly imbalance dataset. \n","# By imbalanced we mean that our original dataset would\n","# need to have an equal no's of 1 and 0's\n","# ---\n","#\n","print(\"Logistic Regression Classifier\", accuracy_score(logistic_y_prediction, y_test))\n","print(\"Decision Trees Classifier\", accuracy_score(decision_y_prediction, y_test))\n","print(\"SVN Classifier\", accuracy_score(svm_y_prediction, y_test))\n","print(\"KNN Classifier\", accuracy_score(knn_y_prediction, y_test))\n","print(\"Naive Bayes Classifier\", accuracy_score(naive_y_prediction, y_test))\n","\n","# Bagging Classifiers\n","# ---\n","print(\"Bagging Classifier\", accuracy_score(bagging_y_classifier, y_test))\n","print(\"Random Forest Classifier\", accuracy_score(random_forest_y_classifier, y_test))\n","\n","# Boosting Classifiers\n","# ---\n","print(\"Ada Boost Classifier\", accuracy_score(ada_boost_y_classifier, y_test))\n","print(\"GBM Classifier\", accuracy_score(gbm_y_classifier, y_test))\n","print(\"XGBoost Classifier\", accuracy_score(xg_boost_y_classifier, y_test))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Logistic Regression Classifier 0.89\n","Decision Trees Classifier 0.9\n","SVN Classifier 0.92\n","KNN Classifier 0.93\n","Naive Bayes Classifier 0.91\n","Bagging Classifier 0.93\n","Random Forest Classifier 0.92\n","Ada Boost Classifier 0.92\n","GBM Classifier 0.91\n","XGBoost Classifier 0.93\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"k4wgNdhhrdVK","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1622748188313,"user_tz":-180,"elapsed":403,"user":{"displayName":"Kuria K. Ken","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhnEdqxk2Mp_jIE4QawUovTRuGsreOMU5LcwWtLIw=s64","userId":"18249265223060828810"}},"outputId":"33636b0b-de88-4d9a-ab17-a9e482c579aa"},"source":["# We now print the classification report, \n","# which is more reliable for a highly imbalanced dataset. \n","# We use the precision values which give us accuracy values.\n","# \n","# ---\n","# The precision will be \"how many are correctly classified among that class\".\n","# The recall means \"how many of this class you find over the whole number of element of this class\".\n","# The f1-score is the harmonic mean between precision & recall.\n","# The support is the number of occurence of the given class in your dataset.\n","# ---\n","# \n","print('Logistic classifier:')\n","print(classification_report(y_test, logistic_y_prediction))\n","\n","print('Decision Tree classifier:')\n","print(classification_report(y_test, decision_y_prediction))\n","\n","print('SVM Classifier:')\n","print(classification_report(y_test, svm_y_prediction))\n","\n","print('KNN Classifier:')\n","print(classification_report(y_test, knn_y_prediction))\n","\n","print('Naive Bayes Classifier:')\n","print(classification_report(y_test, naive_y_prediction)) \n","\n","# Bagging Classifiers\n","# ---\n","print('Bagging Meta Classifier:')\n","print(classification_report(y_test, bagging_y_classifier)) \n","\n","print('Random Forest Classifier:')\n","print(classification_report(y_test, random_forest_y_classifier)) \n","\n","\n","# Boosting Classifiers\n","# ---\n","print('Ada Boost Classifier:')\n","print(classification_report(y_test, ada_boost_y_classifier)) \n","\n","print('GBM Classifier:')\n","print(classification_report(y_test, gbm_y_classifier)) \n","\n","print('XGBoost Classifier:')\n","print(classification_report(y_test, xg_boost_y_classifier)) \n","\n","# Remember, we can then further perform model opmization techiniques i.e. \n","# data cleaning, feature engineering, checking for model assumptions, etc. \n","# to further get the best classifier. "],"execution_count":null,"outputs":[{"output_type":"stream","text":["Logistic classifier:\n","              precision    recall  f1-score   support\n","\n","           0       0.87      0.99      0.92        68\n","           1       0.96      0.69      0.80        32\n","\n","    accuracy                           0.89       100\n","   macro avg       0.91      0.84      0.86       100\n","weighted avg       0.90      0.89      0.88       100\n","\n","Decision Tree classifier:\n","              precision    recall  f1-score   support\n","\n","           0       0.94      0.91      0.93        68\n","           1       0.82      0.88      0.85        32\n","\n","    accuracy                           0.90       100\n","   macro avg       0.88      0.89      0.89       100\n","weighted avg       0.90      0.90      0.90       100\n","\n","SVM Classifier:\n","              precision    recall  f1-score   support\n","\n","           0       0.94      0.94      0.94        68\n","           1       0.88      0.88      0.88        32\n","\n","    accuracy                           0.92       100\n","   macro avg       0.91      0.91      0.91       100\n","weighted avg       0.92      0.92      0.92       100\n","\n","KNN Classifier:\n","              precision    recall  f1-score   support\n","\n","           0       0.96      0.94      0.95        68\n","           1       0.88      0.91      0.89        32\n","\n","    accuracy                           0.93       100\n","   macro avg       0.92      0.92      0.92       100\n","weighted avg       0.93      0.93      0.93       100\n","\n","Naive Bayes Classifier:\n","              precision    recall  f1-score   support\n","\n","           0       0.90      0.97      0.94        68\n","           1       0.93      0.78      0.85        32\n","\n","    accuracy                           0.91       100\n","   macro avg       0.92      0.88      0.89       100\n","weighted avg       0.91      0.91      0.91       100\n","\n","Bagging Meta Classifier:\n","              precision    recall  f1-score   support\n","\n","           0       0.96      0.94      0.95        68\n","           1       0.88      0.91      0.89        32\n","\n","    accuracy                           0.93       100\n","   macro avg       0.92      0.92      0.92       100\n","weighted avg       0.93      0.93      0.93       100\n","\n","Random Forest Classifier:\n","              precision    recall  f1-score   support\n","\n","           0       0.94      0.94      0.94        68\n","           1       0.88      0.88      0.88        32\n","\n","    accuracy                           0.92       100\n","   macro avg       0.91      0.91      0.91       100\n","weighted avg       0.92      0.92      0.92       100\n","\n","Ada Boost Classifier:\n","              precision    recall  f1-score   support\n","\n","           0       0.94      0.94      0.94        68\n","           1       0.88      0.88      0.88        32\n","\n","    accuracy                           0.92       100\n","   macro avg       0.91      0.91      0.91       100\n","weighted avg       0.92      0.92      0.92       100\n","\n","GBM Classifier:\n","              precision    recall  f1-score   support\n","\n","           0       0.93      0.94      0.93        68\n","           1       0.87      0.84      0.86        32\n","\n","    accuracy                           0.91       100\n","   macro avg       0.90      0.89      0.90       100\n","weighted avg       0.91      0.91      0.91       100\n","\n","XGBoost Classifier:\n","              precision    recall  f1-score   support\n","\n","           0       0.96      0.94      0.95        68\n","           1       0.88      0.91      0.89        32\n","\n","    accuracy                           0.93       100\n","   macro avg       0.92      0.92      0.92       100\n","weighted avg       0.93      0.93      0.93       100\n","\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"nnqqUOET9QLu","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1622748775402,"user_tz":-180,"elapsed":392,"user":{"displayName":"Kuria K. Ken","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhnEdqxk2Mp_jIE4QawUovTRuGsreOMU5LcwWtLIw=s64","userId":"18249265223060828810"}},"outputId":"67b13b80-bd01-4f4f-8cb2-88a147d52abd"},"source":["# Answering our question\n","# ---\n","# We then make a new prediction & compare results.\n","# Note that we would only use the best optimized classifier for this case.\n","# ---\n","# Predict whether John, 60 years old with a salary of 2500 will buy a car or not?\n","# ---\n","# Dataset limitation: This is not a practical dataset, thus dataset will lack essential features/variables.\n","# In a real case scenario, we would work with may kinds of datasets that require transformation\n","# i.e. data cleaning, feature engineering, etc.\n","# ---\n","# In addition to answering the above question, \n","# we also predict with the following cases sampled from our dataset:\n","# new_case = [[1,\t29, 75000]] -> 0\n","# new_case = [[1,\t37, 53000]] -> 0\n","# new_case = [[1,\t56, 60000]] -> 1\n","# ---\n","\n","# We scale our new values:\n","# John -> [Male, 60 years, 2500] -> [[1,\t60, 2500]]\n","new_case = [[1,\t40, 70]] \n","new_case = norm.transform(new_case)\n","\n","# Base classifiers\n","print(\"Logistic Regression Classifier\", logistic_classifier.predict(new_case))\n","print(\"Decision Tree Classifier\",decision_classifier.predict(new_case))\n","print(\"SVM Classifier\", svm_classifier.predict(new_case))\n","print(\"KNN Classifier\", knn_classifier.predict(new_case))\n","print(\"Naive Bayes Classifier\", naive_classifier.predict(new_case))\n","\n","# Bagging classifiers\n","# ---\n","print(\"Bagging Meta Classifier\", bagging_meta_classifier.predict(new_case))\n","print(\"Random Forest Classifier\", random_forest_classifier.predict(new_case))\n","\n","# Boosting classifiers\n","# ---\n","print(\"Ada Boosting Classifier\", ada_boost_classifier.predict(new_case))\n","print(\"GBM Classifier\", gbm_classifier.predict(new_case))\n","print(\"XGBoost Classifier\", xg_boost_classifier.predict(new_case)) "],"execution_count":null,"outputs":[{"output_type":"stream","text":["Logistic Regression Classifier [0]\n","Decision Tree Classifier [0]\n","SVM Classifier [1]\n","KNN Classifier [1]\n","Naive Bayes Classifier [0]\n","Bagging Meta Classifier [0]\n","Random Forest Classifier [0]\n","Ada Boosting Classifier [0]\n","GBM Classifier [0]\n","XGBoost Classifier [0]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"ueNkrLMPvYd-"},"source":["Based on our outcome of 1 above, this means that John will buy the car."]},{"cell_type":"markdown","metadata":{"id":"eaPL6iDf7JIA"},"source":["### <font color=\"blue\">Regression</font>"]},{"cell_type":"markdown","metadata":{"id":"tqWcOlZ97JIB"},"source":["##### <font color=\"blue\">Example</font>"]},{"cell_type":"code","metadata":{"id":"MXpXZxEW7JIC"},"source":["# Example\n","# --- \n","# Questions: Create a decision tree regression model using the following dataset.\n","# ---\n","# Dataset url = http://bit.ly/FishDatasetClean\n","# NB: This dataset is clean version of the one \n","# we used in the multiple regression example above.\n","# ---\n","# OUR CODE GOES BELOW\n","# "],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"rZdaSxPNmxW9"},"source":["##### Step 1. Loading our Data "]},{"cell_type":"code","metadata":{"id":"SjnbZeaGmioQ","colab":{"base_uri":"https://localhost:8080/","height":204},"executionInfo":{"status":"ok","timestamp":1622748810833,"user_tz":-180,"elapsed":1413,"user":{"displayName":"Kuria K. Ken","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhnEdqxk2Mp_jIE4QawUovTRuGsreOMU5LcwWtLIw=s64","userId":"18249265223060828810"}},"outputId":"5a446494-1d51-4912-ec41-cb20cd8e59e5"},"source":["# Reading our data\n","# ---\n","# \n","df = pd.read_csv('http://bit.ly/FishDatasetClean')\n","df.head()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Weight</th>\n","      <th>Length1</th>\n","      <th>Length2</th>\n","      <th>Length3</th>\n","      <th>Height</th>\n","      <th>Width</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>242.0</td>\n","      <td>23.2</td>\n","      <td>25.4</td>\n","      <td>30.0</td>\n","      <td>11.5200</td>\n","      <td>4.0200</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>290.0</td>\n","      <td>24.0</td>\n","      <td>26.3</td>\n","      <td>31.2</td>\n","      <td>12.4800</td>\n","      <td>4.3056</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>340.0</td>\n","      <td>23.9</td>\n","      <td>26.5</td>\n","      <td>31.1</td>\n","      <td>12.3778</td>\n","      <td>4.6961</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>363.0</td>\n","      <td>26.3</td>\n","      <td>29.0</td>\n","      <td>33.5</td>\n","      <td>12.7300</td>\n","      <td>4.4555</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>430.0</td>\n","      <td>26.5</td>\n","      <td>29.0</td>\n","      <td>34.0</td>\n","      <td>12.4440</td>\n","      <td>5.1340</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   Weight  Length1  Length2  Length3   Height   Width\n","0   242.0     23.2     25.4     30.0  11.5200  4.0200\n","1   290.0     24.0     26.3     31.2  12.4800  4.3056\n","2   340.0     23.9     26.5     31.1  12.3778  4.6961\n","3   363.0     26.3     29.0     33.5  12.7300  4.4555\n","4   430.0     26.5     29.0     34.0  12.4440  5.1340"]},"metadata":{"tags":[]},"execution_count":36}]},{"cell_type":"code","metadata":{"id":"477dYK8zNrPc","colab":{"base_uri":"https://localhost:8080/","height":297},"executionInfo":{"status":"ok","timestamp":1622748816860,"user_tz":-180,"elapsed":1747,"user":{"displayName":"Kuria K. Ken","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhnEdqxk2Mp_jIE4QawUovTRuGsreOMU5LcwWtLIw=s64","userId":"18249265223060828810"}},"outputId":"e7840d1e-023f-47bd-e0d6-fa210ad29b62"},"source":["# Describing our dataset\n","# ---\n","# \n","df.describe()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Weight</th>\n","      <th>Length1</th>\n","      <th>Length2</th>\n","      <th>Length3</th>\n","      <th>Height</th>\n","      <th>Width</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>159.000000</td>\n","      <td>159.000000</td>\n","      <td>159.000000</td>\n","      <td>159.000000</td>\n","      <td>159.000000</td>\n","      <td>159.000000</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>398.326415</td>\n","      <td>26.247170</td>\n","      <td>28.415723</td>\n","      <td>31.227044</td>\n","      <td>8.970994</td>\n","      <td>4.417486</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>357.978317</td>\n","      <td>9.996441</td>\n","      <td>10.716328</td>\n","      <td>11.610246</td>\n","      <td>4.286208</td>\n","      <td>1.685804</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>0.000000</td>\n","      <td>7.500000</td>\n","      <td>8.400000</td>\n","      <td>8.800000</td>\n","      <td>1.728400</td>\n","      <td>1.047600</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>120.000000</td>\n","      <td>19.050000</td>\n","      <td>21.000000</td>\n","      <td>23.150000</td>\n","      <td>5.944800</td>\n","      <td>3.385650</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>273.000000</td>\n","      <td>25.200000</td>\n","      <td>27.300000</td>\n","      <td>29.400000</td>\n","      <td>7.786000</td>\n","      <td>4.248500</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>650.000000</td>\n","      <td>32.700000</td>\n","      <td>35.500000</td>\n","      <td>39.650000</td>\n","      <td>12.365900</td>\n","      <td>5.584500</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>1650.000000</td>\n","      <td>59.000000</td>\n","      <td>63.400000</td>\n","      <td>68.000000</td>\n","      <td>18.957000</td>\n","      <td>8.142000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["            Weight     Length1     Length2     Length3      Height       Width\n","count   159.000000  159.000000  159.000000  159.000000  159.000000  159.000000\n","mean    398.326415   26.247170   28.415723   31.227044    8.970994    4.417486\n","std     357.978317    9.996441   10.716328   11.610246    4.286208    1.685804\n","min       0.000000    7.500000    8.400000    8.800000    1.728400    1.047600\n","25%     120.000000   19.050000   21.000000   23.150000    5.944800    3.385650\n","50%     273.000000   25.200000   27.300000   29.400000    7.786000    4.248500\n","75%     650.000000   32.700000   35.500000   39.650000   12.365900    5.584500\n","max    1650.000000   59.000000   63.400000   68.000000   18.957000    8.142000"]},"metadata":{"tags":[]},"execution_count":37}]},{"cell_type":"markdown","metadata":{"id":"PfdApR7Jmzm9"},"source":["##### Step 2, 3, 4: Checking, Cleaning, Exploratory Analysis and have already been performed on our dataset."]},{"cell_type":"markdown","metadata":{"id":"1eBPjiM8m14s"},"source":["##### Step 5. Implementation and Evaluation"]},{"cell_type":"code","metadata":{"id":"rprclJHCmiQA"},"source":["# Let's now split our dataset\n","# ---\n","# \n","# Firstly, importing our train_test_split function\n","# ---\n","#\n","from sklearn.model_selection import train_test_split\n","\n","X = df[['Length1', 'Length2', 'Length3', 'Height', 'Width']]\n","y = df['Weight']\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=.3, random_state=0)\n","\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"xM2qYhp2miKc","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1622748839032,"user_tz":-180,"elapsed":1294,"user":{"displayName":"Kuria K. Ken","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhnEdqxk2Mp_jIE4QawUovTRuGsreOMU5LcwWtLIw=s64","userId":"18249265223060828810"}},"outputId":"292f7ee4-50ef-4edd-ea92-ee7543aafacd"},"source":["# Lets now train our regressors\n","# ---\n","#  \n","\n","from sklearn.model_selection import train_test_split\n","\n","X = df[['Length1', 'Length2', 'Length3', 'Height', 'Width']]\n","y = df['Weight']\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=.3, random_state=0)\n","\n","\n","\n","from sklearn.tree import DecisionTreeRegressor \n","from sklearn.ensemble import BaggingRegressor \n","from sklearn.ensemble import RandomForestRegressor\n","from sklearn.ensemble import AdaBoostRegressor\n","from sklearn.ensemble import GradientBoostingRegressor\n","import xgboost as xgb\n","\n","\n","# Creating our regressors, We'll just use the decision tree regressor this time\n","# ---\n","# \n","regressor = DecisionTreeRegressor()\n","\n","# Then creating our ensemble regressors\n","# ---\n","\n","# Bagging Regressors\n","# ---\n","bagging_est_regressor = BaggingRegressor()\n","random_forest_regressor = RandomForestRegressor()\n","\n","# Boosting Regressors\n","# ---\n","ada_boost_regressor = AdaBoostRegressor()\n","gbm_regressor = GradientBoostingRegressor()\n","xgboost_regressor = xgb.XGBRegressor(objective ='reg:squarederror') # It requires us to specify the objective function\n","\n","# Fitting our data to our regressors \n","# ---\n","# Decision Tree Regressor\n","regressor.fit(X_train, y_train)\n","\n","# Bagging Regressors\n","# ---\n","bagging_est_regressor.fit(X_train, y_train)\n","random_forest_regressor.fit(X_train, y_train)\n","\n","# Boosting Regressors\n","# ---\n","ada_boost_regressor.fit(X_train, y_train)\n","gbm_regressor.fit(X_train, y_train)\n","xgboost_regressor.fit(X_train, y_train)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["XGBRegressor(base_score=0.5, booster='gbtree', colsample_bylevel=1,\n","             colsample_bynode=1, colsample_bytree=1, gamma=0,\n","             importance_type='gain', learning_rate=0.1, max_delta_step=0,\n","             max_depth=3, min_child_weight=1, missing=None, n_estimators=100,\n","             n_jobs=1, nthread=None, objective='reg:squarederror',\n","             random_state=0, reg_alpha=0, reg_lambda=1, scale_pos_weight=1,\n","             seed=None, silent=None, subsample=1, verbosity=1)"]},"metadata":{"tags":[]},"execution_count":41}]},{"cell_type":"code","metadata":{"id":"W9FqCDpRpahT"},"source":["# Making predictions using our models\n","# ---\n","#  \n","y_pred = regressor.predict(X_test)\n","\n","# Bagging Regressors\n","# ---\n","bag_est_y_pred = bagging_est_regressor.predict(X_test)\n","random_forest_y_pred = random_forest_regressor.predict(X_test)\n","\n","# Boosting Regressors\n","# ---\n","ada_boost_y_pred = ada_boost_regressor.predict(X_test)\n","gbm_y_pred = gbm_regressor.predict(X_test)\n","xgboost_y_pred = xgboost_regressor.predict(X_test)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"8n51lYFVs9tg","colab":{"base_uri":"https://localhost:8080/","height":204},"executionInfo":{"status":"ok","timestamp":1622748848978,"user_tz":-180,"elapsed":846,"user":{"displayName":"Kuria K. Ken","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhnEdqxk2Mp_jIE4QawUovTRuGsreOMU5LcwWtLIw=s64","userId":"18249265223060828810"}},"outputId":"fe8c204f-b4cb-4d49-8b7b-8fbe98155319"},"source":["# Next, we compare actual output values for X_test with the predicted values\n","# ---\n","#\n","df = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})\n","df.head(5)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Actual</th>\n","      <th>Predicted</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>7</th>\n","      <td>390.0</td>\n","      <td>450.0</td>\n","    </tr>\n","    <tr>\n","      <th>40</th>\n","      <td>0.0</td>\n","      <td>140.0</td>\n","    </tr>\n","    <tr>\n","      <th>95</th>\n","      <td>170.0</td>\n","      <td>200.0</td>\n","    </tr>\n","    <tr>\n","      <th>45</th>\n","      <td>160.0</td>\n","      <td>150.0</td>\n","    </tr>\n","    <tr>\n","      <th>110</th>\n","      <td>556.0</td>\n","      <td>540.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["     Actual  Predicted\n","7     390.0      450.0\n","40      0.0      140.0\n","95    170.0      200.0\n","45    160.0      150.0\n","110   556.0      540.0"]},"metadata":{"tags":[]},"execution_count":43}]},{"cell_type":"code","metadata":{"id":"Ryp4KnEUP2yP","colab":{"base_uri":"https://localhost:8080/","height":204},"executionInfo":{"status":"ok","timestamp":1622748851572,"user_tz":-180,"elapsed":24,"user":{"displayName":"Kuria K. Ken","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhnEdqxk2Mp_jIE4QawUovTRuGsreOMU5LcwWtLIw=s64","userId":"18249265223060828810"}},"outputId":"1934fe38-38b3-46f8-cd9d-72f47928ec3e"},"source":["# We make predictings for the random forest regressor\n","# ---\n","# Next, we compare actual output values for X_test with the predicted values\n","# ---\n","random_forest_df = pd.DataFrame({'Actual': y_test, 'Predicted': random_forest_y_pred})\n","random_forest_df.head(5)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Actual</th>\n","      <th>Predicted</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>7</th>\n","      <td>390.0</td>\n","      <td>424.47</td>\n","    </tr>\n","    <tr>\n","      <th>40</th>\n","      <td>0.0</td>\n","      <td>122.05</td>\n","    </tr>\n","    <tr>\n","      <th>95</th>\n","      <td>170.0</td>\n","      <td>163.86</td>\n","    </tr>\n","    <tr>\n","      <th>45</th>\n","      <td>160.0</td>\n","      <td>157.97</td>\n","    </tr>\n","    <tr>\n","      <th>110</th>\n","      <td>556.0</td>\n","      <td>675.40</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["     Actual  Predicted\n","7     390.0     424.47\n","40      0.0     122.05\n","95    170.0     163.86\n","45    160.0     157.97\n","110   556.0     675.40"]},"metadata":{"tags":[]},"execution_count":44}]},{"cell_type":"code","metadata":{"id":"HNWV3e5RIBks","colab":{"base_uri":"https://localhost:8080/","height":204},"executionInfo":{"status":"ok","timestamp":1622748863051,"user_tz":-180,"elapsed":421,"user":{"displayName":"Kuria K. Ken","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhnEdqxk2Mp_jIE4QawUovTRuGsreOMU5LcwWtLIw=s64","userId":"18249265223060828810"}},"outputId":"3c67013d-ee14-4d83-ebb2-ec87634e0af3"},"source":["# We make predictions for the adaboost regressor\n","# ---\n","# Next, we compare actual output values for X_test with the predicted values\n","# ---\n","ada_boost_df = pd.DataFrame({'Actual': y_test, 'Predicted': ada_boost_y_pred})\n","ada_boost_df.head(5)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Actual</th>\n","      <th>Predicted</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>7</th>\n","      <td>390.0</td>\n","      <td>423.888889</td>\n","    </tr>\n","    <tr>\n","      <th>40</th>\n","      <td>0.0</td>\n","      <td>119.990000</td>\n","    </tr>\n","    <tr>\n","      <th>95</th>\n","      <td>170.0</td>\n","      <td>155.157895</td>\n","    </tr>\n","    <tr>\n","      <th>45</th>\n","      <td>160.0</td>\n","      <td>138.066667</td>\n","    </tr>\n","    <tr>\n","      <th>110</th>\n","      <td>556.0</td>\n","      <td>645.217391</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["     Actual   Predicted\n","7     390.0  423.888889\n","40      0.0  119.990000\n","95    170.0  155.157895\n","45    160.0  138.066667\n","110   556.0  645.217391"]},"metadata":{"tags":[]},"execution_count":46}]},{"cell_type":"code","metadata":{"id":"v7jzgfuWRui6","colab":{"base_uri":"https://localhost:8080/","height":204},"executionInfo":{"status":"ok","timestamp":1622748921134,"user_tz":-180,"elapsed":491,"user":{"displayName":"Kuria K. Ken","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhnEdqxk2Mp_jIE4QawUovTRuGsreOMU5LcwWtLIw=s64","userId":"18249265223060828810"}},"outputId":"3290cc4d-c01c-43b3-cc28-a6b938a4b86e"},"source":["# We make predictions for the gbm regressor\n","# ---\n","# Next, we compare actual output values for X_test with the predicted values\n","# ---\n","gbm_df = pd.DataFrame({'Actual': y_test, 'Predicted': gbm_y_pred})\n","gbm_df.head(5)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Actual</th>\n","      <th>Predicted</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>7</th>\n","      <td>390.0</td>\n","      <td>434.394032</td>\n","    </tr>\n","    <tr>\n","      <th>40</th>\n","      <td>0.0</td>\n","      <td>130.844108</td>\n","    </tr>\n","    <tr>\n","      <th>95</th>\n","      <td>170.0</td>\n","      <td>151.018797</td>\n","    </tr>\n","    <tr>\n","      <th>45</th>\n","      <td>160.0</td>\n","      <td>152.770039</td>\n","    </tr>\n","    <tr>\n","      <th>110</th>\n","      <td>556.0</td>\n","      <td>693.206041</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["     Actual   Predicted\n","7     390.0  434.394032\n","40      0.0  130.844108\n","95    170.0  151.018797\n","45    160.0  152.770039\n","110   556.0  693.206041"]},"metadata":{"tags":[]},"execution_count":47}]},{"cell_type":"code","metadata":{"id":"PvtwjGM-VpcP","colab":{"base_uri":"https://localhost:8080/","height":204},"executionInfo":{"status":"ok","timestamp":1622748924927,"user_tz":-180,"elapsed":82,"user":{"displayName":"Kuria K. Ken","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhnEdqxk2Mp_jIE4QawUovTRuGsreOMU5LcwWtLIw=s64","userId":"18249265223060828810"}},"outputId":"98bd2eaa-95eb-4ed6-a1e7-315a08084ea1"},"source":["# We also predict for the XGboost regressor\n","# ---\n","# Next, we compare actual output values for X_test with the predicted values\n","# ---\n","xgboost_df = pd.DataFrame({'Actual': y_test, 'Predicted': xgboost_y_pred})\n","xgboost_df.head(5)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Actual</th>\n","      <th>Predicted</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>7</th>\n","      <td>390.0</td>\n","      <td>444.598541</td>\n","    </tr>\n","    <tr>\n","      <th>40</th>\n","      <td>0.0</td>\n","      <td>130.755463</td>\n","    </tr>\n","    <tr>\n","      <th>95</th>\n","      <td>170.0</td>\n","      <td>162.332397</td>\n","    </tr>\n","    <tr>\n","      <th>45</th>\n","      <td>160.0</td>\n","      <td>149.509171</td>\n","    </tr>\n","    <tr>\n","      <th>110</th>\n","      <td>556.0</td>\n","      <td>701.653015</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["     Actual   Predicted\n","7     390.0  444.598541\n","40      0.0  130.755463\n","95    170.0  162.332397\n","45    160.0  149.509171\n","110   556.0  701.653015"]},"metadata":{"tags":[]},"execution_count":48}]},{"cell_type":"code","metadata":{"id":"tuOEMtNDmh9O","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1622748931032,"user_tz":-180,"elapsed":431,"user":{"displayName":"Kuria K. Ken","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhnEdqxk2Mp_jIE4QawUovTRuGsreOMU5LcwWtLIw=s64","userId":"18249265223060828810"}},"outputId":"bbd4969b-d25f-4e3f-b26b-9ae52c878da5"},"source":["# Finally, we evaluate the models\n","# ---  \n","# NB: The closer the RMSE is to 0, the better the model.\n","#  \n","from sklearn.metrics import mean_squared_error\n","\n","print('Decision Tree - Root Mean Squared Error:', np.sqrt(mean_squared_error(y_test, y_pred)))\n","\n","# Bagging Regressors\n","# ---\n","print('Bagging Estimator - Root Mean Squared Error:', np.sqrt(mean_squared_error(y_test, bag_est_y_pred)))\n","print('Random Forest - Root Mean Squared Error:', np.sqrt(mean_squared_error(y_test, random_forest_y_pred)))\n","\n","# Boosting Regressors\n","# ---\n","print('Ada Boost - Root Mean Squared Error:', np.sqrt(mean_squared_error(y_test, ada_boost_y_pred)))\n","print('GBM - Root Mean Squared Error:', np.sqrt(mean_squared_error(y_test, gbm_y_pred)))\n","print('XGBoost - Root Mean Squared Error:', np.sqrt(mean_squared_error(y_test, xgboost_y_pred)))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Decision Tree - Root Mean Squared Error: 182.8559872777846\n","Bagging Estimator - Root Mean Squared Error: 153.8841420517397\n","Random Forest - Root Mean Squared Error: 156.08850169448473\n","Ada Boost - Root Mean Squared Error: 170.74226236609675\n","GBM - Root Mean Squared Error: 149.47656642583684\n","XGBoost - Root Mean Squared Error: 144.584484457552\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"wBSYp3fVIupH"},"source":["##<font color=\"green\">Challenges</font>"]},{"cell_type":"markdown","metadata":{"id":"uebT2koxr4V4"},"source":["###<font color=\"green\">Challenge 1</font>"]},{"cell_type":"code","metadata":{"id":"TVcDuh88sFLE","colab":{"base_uri":"https://localhost:8080/","height":224},"executionInfo":{"status":"ok","timestamp":1622749064036,"user_tz":-180,"elapsed":2003,"user":{"displayName":"Kuria K. Ken","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhnEdqxk2Mp_jIE4QawUovTRuGsreOMU5LcwWtLIw=s64","userId":"18249265223060828810"}},"outputId":"eeafb1d1-63bc-4e8f-d5d3-21aa234b1b1f"},"source":["# Challenge 1\n","# ---\n","# Question: A cancer medical reasearch institution would like to make predictions on two different \n","# cancer types benign and malignant. Build a model to predict the breast cancer type \n","# (0 = benign or 1 = malignant) given the following dataset. In addition, make a prediction.\n","# NB: Remember to record your observations and also implement ensemble techniques with the goal of improving accuracy.\n","# Make a recommendation on the best model to use for this problem.\n","# ---\n","# Dataset URL = https://bit.ly/bcdataset\n","# ---\n","# OUR CODE GOES BELOW\n","#\n","\n","wtf = pd.read_csv('https://bit.ly/bcdataset')\n","\n","wtf.sample(5)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>id</th>\n","      <th>diagnosis</th>\n","      <th>radius_mean</th>\n","      <th>texture_mean</th>\n","      <th>perimeter_mean</th>\n","      <th>area_mean</th>\n","      <th>smoothness_mean</th>\n","      <th>compactness_mean</th>\n","      <th>concavity_mean</th>\n","      <th>points_mean</th>\n","      <th>symmetry_mean</th>\n","      <th>dimension_mean</th>\n","      <th>radius_se</th>\n","      <th>texture_se</th>\n","      <th>perimeter_se</th>\n","      <th>area_se</th>\n","      <th>smoothness_se</th>\n","      <th>compactness_se</th>\n","      <th>concavity_se</th>\n","      <th>points_se</th>\n","      <th>symmetry_se</th>\n","      <th>dimension_se</th>\n","      <th>radius_worst</th>\n","      <th>texture_worst</th>\n","      <th>perimeter_worst</th>\n","      <th>area_worst</th>\n","      <th>smoothness_worst</th>\n","      <th>compactness_worst</th>\n","      <th>concavity_worst</th>\n","      <th>points_worst</th>\n","      <th>symmetry_worst</th>\n","      <th>dimension_worst</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>150</th>\n","      <td>894089</td>\n","      <td>B</td>\n","      <td>12.49</td>\n","      <td>16.85</td>\n","      <td>79.19</td>\n","      <td>481.6</td>\n","      <td>0.08511</td>\n","      <td>0.03834</td>\n","      <td>0.004473</td>\n","      <td>0.006423</td>\n","      <td>0.1215</td>\n","      <td>0.05673</td>\n","      <td>0.1716</td>\n","      <td>0.7151</td>\n","      <td>1.0470</td>\n","      <td>12.69</td>\n","      <td>0.004928</td>\n","      <td>0.003012</td>\n","      <td>0.00262</td>\n","      <td>0.003390</td>\n","      <td>0.01393</td>\n","      <td>0.001344</td>\n","      <td>13.34</td>\n","      <td>19.71</td>\n","      <td>84.48</td>\n","      <td>544.2</td>\n","      <td>0.1104</td>\n","      <td>0.04953</td>\n","      <td>0.01938</td>\n","      <td>0.02784</td>\n","      <td>0.1917</td>\n","      <td>0.06174</td>\n","    </tr>\n","    <tr>\n","      <th>10</th>\n","      <td>91485</td>\n","      <td>M</td>\n","      <td>20.59</td>\n","      <td>21.24</td>\n","      <td>137.80</td>\n","      <td>1320.0</td>\n","      <td>0.10850</td>\n","      <td>0.16440</td>\n","      <td>0.218800</td>\n","      <td>0.112100</td>\n","      <td>0.1848</td>\n","      <td>0.06222</td>\n","      <td>0.5904</td>\n","      <td>1.2160</td>\n","      <td>4.2060</td>\n","      <td>75.09</td>\n","      <td>0.006666</td>\n","      <td>0.027910</td>\n","      <td>0.04062</td>\n","      <td>0.014790</td>\n","      <td>0.01117</td>\n","      <td>0.003727</td>\n","      <td>23.86</td>\n","      <td>30.76</td>\n","      <td>163.20</td>\n","      <td>1760.0</td>\n","      <td>0.1464</td>\n","      <td>0.35970</td>\n","      <td>0.51790</td>\n","      <td>0.21130</td>\n","      <td>0.2480</td>\n","      <td>0.08999</td>\n","    </tr>\n","    <tr>\n","      <th>307</th>\n","      <td>9047</td>\n","      <td>B</td>\n","      <td>12.94</td>\n","      <td>16.17</td>\n","      <td>83.18</td>\n","      <td>507.6</td>\n","      <td>0.09879</td>\n","      <td>0.08836</td>\n","      <td>0.032960</td>\n","      <td>0.023900</td>\n","      <td>0.1735</td>\n","      <td>0.06200</td>\n","      <td>0.1458</td>\n","      <td>0.9050</td>\n","      <td>0.9975</td>\n","      <td>11.36</td>\n","      <td>0.002887</td>\n","      <td>0.012850</td>\n","      <td>0.01613</td>\n","      <td>0.007308</td>\n","      <td>0.01870</td>\n","      <td>0.001972</td>\n","      <td>13.86</td>\n","      <td>23.02</td>\n","      <td>89.69</td>\n","      <td>580.9</td>\n","      <td>0.1172</td>\n","      <td>0.19580</td>\n","      <td>0.18100</td>\n","      <td>0.08388</td>\n","      <td>0.3297</td>\n","      <td>0.07834</td>\n","    </tr>\n","    <tr>\n","      <th>249</th>\n","      <td>9111843</td>\n","      <td>B</td>\n","      <td>12.00</td>\n","      <td>28.23</td>\n","      <td>76.77</td>\n","      <td>442.5</td>\n","      <td>0.08437</td>\n","      <td>0.06450</td>\n","      <td>0.040550</td>\n","      <td>0.019450</td>\n","      <td>0.1615</td>\n","      <td>0.06104</td>\n","      <td>0.1912</td>\n","      <td>1.7050</td>\n","      <td>1.5160</td>\n","      <td>13.86</td>\n","      <td>0.007334</td>\n","      <td>0.025890</td>\n","      <td>0.02941</td>\n","      <td>0.009166</td>\n","      <td>0.01745</td>\n","      <td>0.004302</td>\n","      <td>13.09</td>\n","      <td>37.88</td>\n","      <td>85.07</td>\n","      <td>523.7</td>\n","      <td>0.1208</td>\n","      <td>0.18560</td>\n","      <td>0.18110</td>\n","      <td>0.07116</td>\n","      <td>0.2447</td>\n","      <td>0.08194</td>\n","    </tr>\n","    <tr>\n","      <th>519</th>\n","      <td>8810158</td>\n","      <td>B</td>\n","      <td>13.11</td>\n","      <td>22.54</td>\n","      <td>87.02</td>\n","      <td>529.4</td>\n","      <td>0.10020</td>\n","      <td>0.14830</td>\n","      <td>0.087050</td>\n","      <td>0.051020</td>\n","      <td>0.1850</td>\n","      <td>0.07310</td>\n","      <td>0.1931</td>\n","      <td>0.9223</td>\n","      <td>1.4910</td>\n","      <td>15.09</td>\n","      <td>0.005251</td>\n","      <td>0.030410</td>\n","      <td>0.02526</td>\n","      <td>0.008304</td>\n","      <td>0.02514</td>\n","      <td>0.004198</td>\n","      <td>14.55</td>\n","      <td>29.16</td>\n","      <td>99.48</td>\n","      <td>639.3</td>\n","      <td>0.1349</td>\n","      <td>0.44020</td>\n","      <td>0.31620</td>\n","      <td>0.11260</td>\n","      <td>0.4128</td>\n","      <td>0.10760</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["          id diagnosis  ...  symmetry_worst  dimension_worst\n","150   894089         B  ...          0.1917          0.06174\n","10     91485         M  ...          0.2480          0.08999\n","307     9047         B  ...          0.3297          0.07834\n","249  9111843         B  ...          0.2447          0.08194\n","519  8810158         B  ...          0.4128          0.10760\n","\n","[5 rows x 32 columns]"]},"metadata":{"tags":[]},"execution_count":51}]},{"cell_type":"code","metadata":{"id":"WO3BKmK6YDsW","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1622749154274,"user_tz":-180,"elapsed":433,"user":{"displayName":"Kuria K. Ken","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhnEdqxk2Mp_jIE4QawUovTRuGsreOMU5LcwWtLIw=s64","userId":"18249265223060828810"}},"outputId":"501af4ba-69f0-42ad-b8dd-5882f70edbf0"},"source":["\n","\n"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(569, 32)"]},"metadata":{"tags":[]},"execution_count":54}]},{"cell_type":"code","metadata":{"id":"_8N3jkrdYF4j","colab":{"base_uri":"https://localhost:8080/","height":224},"executionInfo":{"status":"ok","timestamp":1622749166990,"user_tz":-180,"elapsed":504,"user":{"displayName":"Kuria K. Ken","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhnEdqxk2Mp_jIE4QawUovTRuGsreOMU5LcwWtLIw=s64","userId":"18249265223060828810"}},"outputId":"29eee349-3e00-4a69-8d68-60e2447f8b92"},"source":["wtf[\"diagnosis\"] = np.where(wtf[\"diagnosis\"].str.contains(\"M\", \"B\"), 1, 0)\n","wtf.head()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>id</th>\n","      <th>diagnosis</th>\n","      <th>radius_mean</th>\n","      <th>texture_mean</th>\n","      <th>perimeter_mean</th>\n","      <th>area_mean</th>\n","      <th>smoothness_mean</th>\n","      <th>compactness_mean</th>\n","      <th>concavity_mean</th>\n","      <th>points_mean</th>\n","      <th>symmetry_mean</th>\n","      <th>dimension_mean</th>\n","      <th>radius_se</th>\n","      <th>texture_se</th>\n","      <th>perimeter_se</th>\n","      <th>area_se</th>\n","      <th>smoothness_se</th>\n","      <th>compactness_se</th>\n","      <th>concavity_se</th>\n","      <th>points_se</th>\n","      <th>symmetry_se</th>\n","      <th>dimension_se</th>\n","      <th>radius_worst</th>\n","      <th>texture_worst</th>\n","      <th>perimeter_worst</th>\n","      <th>area_worst</th>\n","      <th>smoothness_worst</th>\n","      <th>compactness_worst</th>\n","      <th>concavity_worst</th>\n","      <th>points_worst</th>\n","      <th>symmetry_worst</th>\n","      <th>dimension_worst</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>87139402</td>\n","      <td>0</td>\n","      <td>12.32</td>\n","      <td>12.39</td>\n","      <td>78.85</td>\n","      <td>464.1</td>\n","      <td>0.10280</td>\n","      <td>0.06981</td>\n","      <td>0.03987</td>\n","      <td>0.03700</td>\n","      <td>0.1959</td>\n","      <td>0.05955</td>\n","      <td>0.2360</td>\n","      <td>0.6656</td>\n","      <td>1.670</td>\n","      <td>17.43</td>\n","      <td>0.008045</td>\n","      <td>0.011800</td>\n","      <td>0.01683</td>\n","      <td>0.012410</td>\n","      <td>0.01924</td>\n","      <td>0.002248</td>\n","      <td>13.50</td>\n","      <td>15.64</td>\n","      <td>86.97</td>\n","      <td>549.1</td>\n","      <td>0.1385</td>\n","      <td>0.1266</td>\n","      <td>0.12420</td>\n","      <td>0.09391</td>\n","      <td>0.2827</td>\n","      <td>0.06771</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>8910251</td>\n","      <td>0</td>\n","      <td>10.60</td>\n","      <td>18.95</td>\n","      <td>69.28</td>\n","      <td>346.4</td>\n","      <td>0.09688</td>\n","      <td>0.11470</td>\n","      <td>0.06387</td>\n","      <td>0.02642</td>\n","      <td>0.1922</td>\n","      <td>0.06491</td>\n","      <td>0.4505</td>\n","      <td>1.1970</td>\n","      <td>3.430</td>\n","      <td>27.10</td>\n","      <td>0.007470</td>\n","      <td>0.035810</td>\n","      <td>0.03354</td>\n","      <td>0.013650</td>\n","      <td>0.03504</td>\n","      <td>0.003318</td>\n","      <td>11.88</td>\n","      <td>22.94</td>\n","      <td>78.28</td>\n","      <td>424.8</td>\n","      <td>0.1213</td>\n","      <td>0.2515</td>\n","      <td>0.19160</td>\n","      <td>0.07926</td>\n","      <td>0.2940</td>\n","      <td>0.07587</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>905520</td>\n","      <td>0</td>\n","      <td>11.04</td>\n","      <td>16.83</td>\n","      <td>70.92</td>\n","      <td>373.2</td>\n","      <td>0.10770</td>\n","      <td>0.07804</td>\n","      <td>0.03046</td>\n","      <td>0.02480</td>\n","      <td>0.1714</td>\n","      <td>0.06340</td>\n","      <td>0.1967</td>\n","      <td>1.3870</td>\n","      <td>1.342</td>\n","      <td>13.54</td>\n","      <td>0.005158</td>\n","      <td>0.009355</td>\n","      <td>0.01056</td>\n","      <td>0.007483</td>\n","      <td>0.01718</td>\n","      <td>0.002198</td>\n","      <td>12.41</td>\n","      <td>26.44</td>\n","      <td>79.93</td>\n","      <td>471.4</td>\n","      <td>0.1369</td>\n","      <td>0.1482</td>\n","      <td>0.10670</td>\n","      <td>0.07431</td>\n","      <td>0.2998</td>\n","      <td>0.07881</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>868871</td>\n","      <td>0</td>\n","      <td>11.28</td>\n","      <td>13.39</td>\n","      <td>73.00</td>\n","      <td>384.8</td>\n","      <td>0.11640</td>\n","      <td>0.11360</td>\n","      <td>0.04635</td>\n","      <td>0.04796</td>\n","      <td>0.1771</td>\n","      <td>0.06072</td>\n","      <td>0.3384</td>\n","      <td>1.3430</td>\n","      <td>1.851</td>\n","      <td>26.33</td>\n","      <td>0.011270</td>\n","      <td>0.034980</td>\n","      <td>0.02187</td>\n","      <td>0.019650</td>\n","      <td>0.01580</td>\n","      <td>0.003442</td>\n","      <td>11.92</td>\n","      <td>15.77</td>\n","      <td>76.53</td>\n","      <td>434.0</td>\n","      <td>0.1367</td>\n","      <td>0.1822</td>\n","      <td>0.08669</td>\n","      <td>0.08611</td>\n","      <td>0.2102</td>\n","      <td>0.06784</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>9012568</td>\n","      <td>0</td>\n","      <td>15.19</td>\n","      <td>13.21</td>\n","      <td>97.65</td>\n","      <td>711.8</td>\n","      <td>0.07963</td>\n","      <td>0.06934</td>\n","      <td>0.03393</td>\n","      <td>0.02657</td>\n","      <td>0.1721</td>\n","      <td>0.05544</td>\n","      <td>0.1783</td>\n","      <td>0.4125</td>\n","      <td>1.338</td>\n","      <td>17.72</td>\n","      <td>0.005012</td>\n","      <td>0.014850</td>\n","      <td>0.01551</td>\n","      <td>0.009155</td>\n","      <td>0.01647</td>\n","      <td>0.001767</td>\n","      <td>16.20</td>\n","      <td>15.73</td>\n","      <td>104.50</td>\n","      <td>819.1</td>\n","      <td>0.1126</td>\n","      <td>0.1737</td>\n","      <td>0.13620</td>\n","      <td>0.08178</td>\n","      <td>0.2487</td>\n","      <td>0.06766</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["         id  diagnosis  ...  symmetry_worst  dimension_worst\n","0  87139402          0  ...          0.2827          0.06771\n","1   8910251          0  ...          0.2940          0.07587\n","2    905520          0  ...          0.2998          0.07881\n","3    868871          0  ...          0.2102          0.06784\n","4   9012568          0  ...          0.2487          0.06766\n","\n","[5 rows x 32 columns]"]},"metadata":{"tags":[]},"execution_count":55}]},{"cell_type":"code","metadata":{"id":"GWs_8zV8YFvp"},"source":["\n","X = wtf.iloc[:, [3, 4 , 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]].values  # Independent/predictor variables\n","y = wtf.iloc[:, 2].values          # Dependent/label variable \n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"TNC5S-XUYFob"},"source":["from sklearn.model_selection import train_test_split\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0)\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"cdbm36yaYFfy"},"source":["# Performing normalisation\n","from sklearn.preprocessing import MinMaxScaler  \n","norm = MinMaxScaler().fit(X_train) \n","X_train = norm.transform(X_train) \n","X_test = norm.transform(X_test)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"kqEOM51LYFYD","colab":{"base_uri":"https://localhost:8080/","height":375},"executionInfo":{"status":"error","timestamp":1622749777323,"user_tz":-180,"elapsed":427,"user":{"displayName":"Kuria K. Ken","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhnEdqxk2Mp_jIE4QawUovTRuGsreOMU5LcwWtLIw=s64","userId":"18249265223060828810"}},"outputId":"e68ef1d5-7b59-4523-e51a-176a1d8d2242"},"source":["# In this example, because we will be comparing how different classification models will perform\n","# ---\n","#\n","from sklearn.linear_model import LogisticRegression # Logistic Regression Classifier\n","from sklearn.tree import DecisionTreeClassifier     # Decision Tree Classifier\n","from sklearn.svm import SVC                         # SVM Classifier\n","from sklearn.naive_bayes import GaussianNB          # Naive Bayes Classifier\n","from sklearn.neighbors import KNeighborsClassifier  # KNN Classifier\n","\n","# We will also use our ensemble classifiers\n","from sklearn.ensemble import BaggingClassifier           # Bagging Meta-Estimator Classifier\n","from sklearn.ensemble import RandomForestClassifier      # RandomForest Classifier \n","from sklearn.ensemble import AdaBoostClassifier          # AdaBoost Classifier\n","from sklearn.ensemble import GradientBoostingClassifier  # AdaBoost GradientBoostingClassifier\n","import xgboost as xgb                                    # Importing the XGBoost library\n","\n","# Below, we make instances of the classifiers; LogisticRegression, \n","# DecisionTreeClassifier, SVC, GaussianNB, KNeighborsClassifier, GaussianNB.\n","# As we will get to see, each of the classifiers take different parameters.\n","# ---\n","# \n","logistic_classifier = LogisticRegression()\n","decision_classifier = DecisionTreeClassifier()\n","svm_classifier = SVC()\n","knn_classifier = KNeighborsClassifier()\n","naive_classifier = GaussianNB() \n","\n","# We start implementing ensemble methods by first using Bagging Classifiers\n","# ---\n","# Uncomment each classifier and run the respective code\n","# ---\n","bagging_meta_classifier = BaggingClassifier()\n","random_forest_classifier = RandomForestClassifier()\n","\n","# Boosting Classifiers\n","# ---\n","ada_boost_classifier = AdaBoostClassifier()\n","gbm_classifier = GradientBoostingClassifier() \n","xg_boost_classifier = xgb.XGBClassifier() \n","\n","# Now using these classifiers to fit our data, X_train and y_train.\n","# By fitting we mean we train our classifiers based on the train dataset.\n","# ---\n","# Upon running this cell, we should have classifiers that can predict \n","# whether a person will buy a car or not.\n","# ---\n","#\n","logistic_classifier.fit(X_train, y_train)\n","decision_classifier.fit(X_train, y_train)\n","svm_classifier.fit(X_train, y_train)\n","knn_classifier.fit(X_train, y_train)\n","naive_classifier.fit(X_train, y_train)\n","\n","# Bagging Classifiers\n","# ---\n","bagging_meta_classifier.fit(X_train, y_train)\n","random_forest_classifier.fit(X_train, y_train)\n","\n","# Boosting Classifiers\n","# ---\n","ada_boost_classifier.fit(X_train, y_train)\n","gbm_classifier.fit(X_train, y_train)\n","xg_boost_classifier.fit(X_train, y_train)"],"execution_count":null,"outputs":[{"output_type":"error","ename":"ValueError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-70-0bc20d8b542a>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     46\u001b[0m \u001b[0;31m# ---\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     47\u001b[0m \u001b[0;31m#\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 48\u001b[0;31m \u001b[0mlogistic_classifier\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_train\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     49\u001b[0m \u001b[0mdecision_classifier\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_train\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     50\u001b[0m \u001b[0msvm_classifier\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_train\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_logistic.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, X, y, sample_weight)\u001b[0m\n\u001b[1;32m   1526\u001b[0m         X, y = check_X_y(X, y, accept_sparse='csr', dtype=_dtype, order=\"C\",\n\u001b[1;32m   1527\u001b[0m                          accept_large_sparse=solver != 'liblinear')\n\u001b[0;32m-> 1528\u001b[0;31m         \u001b[0mcheck_classification_targets\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1529\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mclasses_\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0munique\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1530\u001b[0m         \u001b[0mn_samples\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mn_features\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/sklearn/utils/multiclass.py\u001b[0m in \u001b[0;36mcheck_classification_targets\u001b[0;34m(y)\u001b[0m\n\u001b[1;32m    167\u001b[0m     if y_type not in ['binary', 'multiclass', 'multiclass-multioutput',\n\u001b[1;32m    168\u001b[0m                       'multilabel-indicator', 'multilabel-sequences']:\n\u001b[0;32m--> 169\u001b[0;31m         \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Unknown label type: %r\"\u001b[0m \u001b[0;34m%\u001b[0m \u001b[0my_type\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    170\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    171\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: Unknown label type: 'continuous'"]}]},{"cell_type":"code","metadata":{"id":"xSI4wK1JYFQU"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"LGaRoawvYFIg"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"vUmHboxAYFCl"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"0N-UuZm3YE0v"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Nw3T25R2YEvo"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Xs5XQ3-sYDff"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"B-eE6btO3KKM"},"source":["###<font color=\"green\">Challenge 2</font>"]},{"cell_type":"code","metadata":{"id":"9b-Q2CMI2wg1","colab":{"base_uri":"https://localhost:8080/","height":297},"executionInfo":{"status":"ok","timestamp":1622750842730,"user_tz":-180,"elapsed":594,"user":{"displayName":"Kuria K. Ken","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhnEdqxk2Mp_jIE4QawUovTRuGsreOMU5LcwWtLIw=s64","userId":"18249265223060828810"}},"outputId":"75e61afe-bd2d-4367-9ca4-1502cb284f62"},"source":["# Challenge \n","# ---\n","# Predict the price of cars comparing your models using the following dataset. \n","# Make a recommendation on the best model to use for this problem.\n","# ---\n","# Dataset url = http://bit.ly/CarPriceDataset\n","# ---\n","# OUR CODE GOES BELOW\n","#\n","\n","sanufa = pd.read_csv('http://bit.ly/CarPriceDataset')\n","\n","sanufa.describe()"],"execution_count":4,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>car_ID</th>\n","      <th>wheelbase</th>\n","      <th>carlength</th>\n","      <th>carwidth</th>\n","      <th>carheight</th>\n","      <th>curbweight</th>\n","      <th>enginesize</th>\n","      <th>boreratio</th>\n","      <th>stroke</th>\n","      <th>compressionratio</th>\n","      <th>horsepower</th>\n","      <th>peakrpm</th>\n","      <th>citympg</th>\n","      <th>highwaympg</th>\n","      <th>price</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>205.000000</td>\n","      <td>205.000000</td>\n","      <td>205.000000</td>\n","      <td>205.000000</td>\n","      <td>205.000000</td>\n","      <td>205.000000</td>\n","      <td>205.000000</td>\n","      <td>205.000000</td>\n","      <td>205.000000</td>\n","      <td>205.000000</td>\n","      <td>205.000000</td>\n","      <td>205.000000</td>\n","      <td>205.000000</td>\n","      <td>205.000000</td>\n","      <td>205.000000</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>103.000000</td>\n","      <td>98.756585</td>\n","      <td>174.049268</td>\n","      <td>65.907805</td>\n","      <td>53.724878</td>\n","      <td>2555.565854</td>\n","      <td>126.907317</td>\n","      <td>3.329756</td>\n","      <td>3.255415</td>\n","      <td>10.142537</td>\n","      <td>104.117073</td>\n","      <td>5125.121951</td>\n","      <td>25.219512</td>\n","      <td>30.751220</td>\n","      <td>13276.710571</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>59.322565</td>\n","      <td>6.021776</td>\n","      <td>12.337289</td>\n","      <td>2.145204</td>\n","      <td>2.443522</td>\n","      <td>520.680204</td>\n","      <td>41.642693</td>\n","      <td>0.270844</td>\n","      <td>0.313597</td>\n","      <td>3.972040</td>\n","      <td>39.544167</td>\n","      <td>476.985643</td>\n","      <td>6.542142</td>\n","      <td>6.886443</td>\n","      <td>7988.852332</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>1.000000</td>\n","      <td>86.600000</td>\n","      <td>141.100000</td>\n","      <td>60.300000</td>\n","      <td>47.800000</td>\n","      <td>1488.000000</td>\n","      <td>61.000000</td>\n","      <td>2.540000</td>\n","      <td>2.070000</td>\n","      <td>7.000000</td>\n","      <td>48.000000</td>\n","      <td>4150.000000</td>\n","      <td>13.000000</td>\n","      <td>16.000000</td>\n","      <td>5118.000000</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>52.000000</td>\n","      <td>94.500000</td>\n","      <td>166.300000</td>\n","      <td>64.100000</td>\n","      <td>52.000000</td>\n","      <td>2145.000000</td>\n","      <td>97.000000</td>\n","      <td>3.150000</td>\n","      <td>3.110000</td>\n","      <td>8.600000</td>\n","      <td>70.000000</td>\n","      <td>4800.000000</td>\n","      <td>19.000000</td>\n","      <td>25.000000</td>\n","      <td>7788.000000</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>103.000000</td>\n","      <td>97.000000</td>\n","      <td>173.200000</td>\n","      <td>65.500000</td>\n","      <td>54.100000</td>\n","      <td>2414.000000</td>\n","      <td>120.000000</td>\n","      <td>3.310000</td>\n","      <td>3.290000</td>\n","      <td>9.000000</td>\n","      <td>95.000000</td>\n","      <td>5200.000000</td>\n","      <td>24.000000</td>\n","      <td>30.000000</td>\n","      <td>10295.000000</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>154.000000</td>\n","      <td>102.400000</td>\n","      <td>183.100000</td>\n","      <td>66.900000</td>\n","      <td>55.500000</td>\n","      <td>2935.000000</td>\n","      <td>141.000000</td>\n","      <td>3.580000</td>\n","      <td>3.410000</td>\n","      <td>9.400000</td>\n","      <td>116.000000</td>\n","      <td>5500.000000</td>\n","      <td>30.000000</td>\n","      <td>34.000000</td>\n","      <td>16503.000000</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>205.000000</td>\n","      <td>120.900000</td>\n","      <td>208.100000</td>\n","      <td>72.300000</td>\n","      <td>59.800000</td>\n","      <td>4066.000000</td>\n","      <td>326.000000</td>\n","      <td>3.940000</td>\n","      <td>4.170000</td>\n","      <td>23.000000</td>\n","      <td>288.000000</td>\n","      <td>6600.000000</td>\n","      <td>49.000000</td>\n","      <td>54.000000</td>\n","      <td>45400.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["           car_ID   wheelbase   carlength  ...     citympg  highwaympg         price\n","count  205.000000  205.000000  205.000000  ...  205.000000  205.000000    205.000000\n","mean   103.000000   98.756585  174.049268  ...   25.219512   30.751220  13276.710571\n","std     59.322565    6.021776   12.337289  ...    6.542142    6.886443   7988.852332\n","min      1.000000   86.600000  141.100000  ...   13.000000   16.000000   5118.000000\n","25%     52.000000   94.500000  166.300000  ...   19.000000   25.000000   7788.000000\n","50%    103.000000   97.000000  173.200000  ...   24.000000   30.000000  10295.000000\n","75%    154.000000  102.400000  183.100000  ...   30.000000   34.000000  16503.000000\n","max    205.000000  120.900000  208.100000  ...   49.000000   54.000000  45400.000000\n","\n","[8 rows x 15 columns]"]},"metadata":{"tags":[]},"execution_count":4}]},{"cell_type":"code","metadata":{"id":"9e1Y5Gq2bgRN","colab":{"base_uri":"https://localhost:8080/","height":232},"executionInfo":{"status":"error","timestamp":1622750482988,"user_tz":-180,"elapsed":962,"user":{"displayName":"Kuria K. Ken","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhnEdqxk2Mp_jIE4QawUovTRuGsreOMU5LcwWtLIw=s64","userId":"18249265223060828810"}},"outputId":"3bbdb2cf-6cd1-4041-e135-78ae609a38d4"},"source":["from sklearn.model_selection import train_test_split\n","\n","X = sanufa[['Length1', 'Length2', 'Length3', 'Height', 'Width']]\n","y = sanufa['price']\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=.3, random_state=0)\n","\n"],"execution_count":1,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-1-1451683f82d2>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0msklearn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmodel_selection\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mtrain_test_split\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0mX\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msanufa\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'Length1'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'Length2'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'Length3'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'Height'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'Width'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m \u001b[0my\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msanufa\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'Weight'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mX_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mX_test\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_test\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtrain_test_split\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtest_size\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m.3\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrandom_state\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'sanufa' is not defined"]}]},{"cell_type":"code","metadata":{"id":"UR4ZN978dh8U"},"source":["# Lets now train our regressors\n","# ---\n","#  \n","\n","\n","\n","from sklearn.tree import DecisionTreeRegressor \n","from sklearn.ensemble import BaggingRegressor \n","from sklearn.ensemble import RandomForestRegressor\n","from sklearn.ensemble import AdaBoostRegressor\n","from sklearn.ensemble import GradientBoostingRegressor\n","import xgboost as xgb\n","\n","\n","# Creating our regressors, We'll just use the decision tree regressor this time\n","# ---\n","# \n","regressor = DecisionTreeRegressor()\n","\n","# Then creating our ensemble regressors\n","# ---\n","\n","# Bagging Regressors\n","# ---\n","bagging_est_regressor = BaggingRegressor()\n","random_forest_regressor = RandomForestRegressor()\n","\n","# Boosting Regressors\n","# ---\n","ada_boost_regressor = AdaBoostRegressor()\n","gbm_regressor = GradientBoostingRegressor()\n","xgboost_regressor = xgb.XGBRegressor(objective ='reg:squarederror') # It requires us to specify the objective function\n","\n","# Fitting our data to our regressors \n","# ---\n","# Decision Tree Regressor\n","regressor.fit(X_train, y_train)\n","\n","# Bagging Regressors\n","# ---\n","bagging_est_regressor.fit(X_train, y_train)\n","random_forest_regressor.fit(X_train, y_train)\n","\n","# Boosting Regressors\n","# ---\n","ada_boost_regressor.fit(X_train, y_train)\n","gbm_regressor.fit(X_train, y_train)\n","xgboost_regressor.fit(X_train, y_train)"],"execution_count":null,"outputs":[]}]}